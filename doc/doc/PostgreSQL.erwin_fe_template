SPItemBegin =  View Columns
10000:{# [
		ForEachVectorReference("Physical Order List")
		{
			Generate("")
			Separator(",")
			[
				PushReferenceX("Parent Relationship Ref") 
				[
					[ 
						QuoteProperty("Alias Name") "." 
					]
					[
						IsNull([PropertyValue("Alias Name")])
						PushReferenceX("Parent Entity Ref")
						[
							[Owner("")"."] PhysicalName("") "." 
						]
						PopX("")
					]
					
				]	
				PopX("")
				[
					PushReferenceX("Parent Attribute Ref")
						[	IsNotNull(Execute("Is Owner Entity"),"<FALSE>") PhysicalName("") ]
						[	IsNotNull(Execute("Is Owner View Type"),"<FALSE>") Name("") ]
					PopX("")
				]
			]
			[ Property("View Expression") [ " " IsNotNull(Execute("Is Owner Materialized View"),"<FALSE>") " AS " Name("") ] ]
            [ IsNull([Property("View Expression")])
                IsNull(Execute("View Parent Alias Name"))
                " " IsNotNull(Execute("Is Owner Materialized View"),"<FALSE>") " AS " Name("")
            ]
		}

		]
#}SPItemEnd

SPItemBegin = View Parent Attribue Name
10000:
{#
    [ PushReferenceX("Parent Attribute Ref")
	    [ IsNotNull(Execute("Is Owner Entity"),"<FALSE>") PhysicalName("") ]
		[ IsNotNull(Execute("Is Owner View Type"),"<FALSE>") Name("") ]
	  PopX("")
	]
#}
SPItemEnd

SPItemBegin = View Parent Alias Name
10000:
{#
    [ IsNotNull(Execute("View Parent Attribue Name"),"<FALSE>") IsNotNull([Name("")],"<FALSE>") CompareStrings(Execute("View Parent Attribue Name"), Name("")) ]
#}
SPItemEnd


SPItemBegin = View Column Has Alias
10000:
{#
    [ 
		ForEachVectorReference("Physical Order List")
		{
			Generate("")
			PropertyValue("Name","<FALSE>")
		}
	]
#}
SPItemEnd


SPItemBegin = Is Owner Entity
10000:
{#
    [ PushOwnerX("")
		[
			IsObjectType("Entity") "Entity"
		]
	  PopX("")
	]
#}
SPItemEnd


SPItemBegin = Is Owner Table Key Group
10000:
{#
    [ PushOwnerX("")
		[
			IsObjectType("Key Group") "Key Group"
			IsNotNull(Execute("Is Owner Entity"),"<FALSE>")
		]
	  PopX("")
	]
#}
SPItemEnd

SPItemBegin = Is Owner View
10000:
{#
    [ PushOwnerX("")
		[
			[IsObjectType("View") "View"]
		]
	  PopX("")
	]
#}
SPItemEnd


SPItemBegin = Is Owner View Type
10000:
{#
    [ PushOwnerX("")
		[
			[IsObjectType("View") "View"]
			[IsObjectType("Cached View") "Cached View"]
		]
	  PopX("")
	]
#}
SPItemEnd

SPItemBegin = Is Owner Materialized View
10000:
{#
    [ PushOwnerX("")
		[
			[IsObjectType("Cached View") "Cached View"]
		]
	  PopX("")
	]
#}
SPItemEnd


SPItemBegin = Is Owner Database
10000:
{#
    [ PushOwnerX("")
		[
			IsObjectType("Oracle Database") "Oracle Database"
		]
	  PopX("")
	]
#}
SPItemEnd

SPItemBegin =  From Clause
10000:{# 
		[
		ForEachVectorReference("Child Relations Ref")
		{
			Generate("")
			Separator(",")
            [PushReferenceX("Parent Entity Ref")
				[Owner("")"."]PhysicalName("")
			PopX("")]
			[" " QuoteProperty("Alias Name") ]
		}
		]
#}SPItemEnd

		
SPItemBegin =  Select Statement
10000:  {#[
		" SELECT " [DecodeProperty("Select Type","1","ALL","2","DISTINCT","3","UNIQUE") " "]
		IsNotNull(Execute("View Columns"),"<TRUE>")
		"\r\n\t\t" "FROM "
		IsNotNull(Execute("From Clause"),"<TRUE>")
		["\r\n\t\t" "WHERE " PropertyValue("View Where")]
		["\r\n\t\t" ["START WITH " PropertyValue("Start With Condition") " "] "CONNECT BY " [DecodeProperty("No Cycle","<TRUE>","NOCYCLE") " "] PropertyValue("Hierarchical Condition") ]
		["\r\n\t\t" "GROUP BY " PropertyValue("View Group By")]
		["\r\n\t\t" "HAVING " PropertyValue("View Having")]
		["\r\n\t\t" "ORDER BY " PropertyValue("View Order By")]
	]
#}SPItemEnd
	  
SPItemBegin =  EndOfStatement
10000: {#
		";"
		"\r\n\r\n\r\n"
		EndOfStatement("")
                #}SPItemEnd
		
		
SPItemBegin =  Expand Check Value
10000: {#[   PushReferenceX("Validation Rule Ref") 
			[
				Generate("")
				[
					" CHECK ("  ExpandErwinMacro("Server Value") ")"
				]
			]
			PopX("")
		]
#}SPItemEnd

SPItemBegin = Alter Drop All Constraints
10000: {#[
	[ForEachChildObject("Check Constraint Usage")
	{
	    IsNull([IsCreated("") "Newly Created"])
		Separator("\r\n")
		[
			"ALTER TABLE " PushOwnerX("") [PrevOwner("")"."]PrevPhysicalName("") PopX("") " DROP CONSTRAINT " PhysicalName("") 
			Execute("EndOfStatement")
		]
	}]
	[Option("ColumnPhysicalOrder")
		ForEachVectorReference("Physical Order List")
		{
			Separator("\r\n")
			[
				"ALTER TABLE " PushOwnerX("") [PrevOwner("")"."]PrevPhysicalName("") PopX("") " DROP CONSTRAINT " 
				QuoteProperty("Null Option Constraint Name") 
				Execute("EndOfStatement")
			]
			[ForEachChildObject("Check Constraint Usage")
			{
			    IsNull([IsCreated("") "Newly Created"])
				Separator("\r\n")
				[
					"ALTER TABLE " PushOwnerX("") PushOwnerX("") [PrevOwner("")"."]PrevPhysicalName("") PopX("") PopX("") " DROP CONSTRAINT " 
					PhysicalName("") 
					Execute("EndOfStatement")
				]
			}]
		}
	]	
	[Option("!ColumnPhysicalOrder")
		ForEachVectorReference("Column Order List")
		{
			Separator("\r\n")
			[
				"ALTER TABLE " PushOwnerX("") [PrevOwner("")"."]PrevPhysicalName("") PopX("") " DROP CONSTRAINT " 
				QuoteProperty("Null Option Constraint Name") 
				Execute("EndOfStatement")
			]
			[ForEachChildObject("Check Constraint Usage")
			{
			    IsNull([IsCreated("") "Newly Created"])
				Separator("\r\n")
				[
					"ALTER TABLE " PushOwnerX("") PushOwnerX("") [PrevOwner("")"."]PrevPhysicalName("") PopX("") PopX("") " DROP CONSTRAINT " 
					PhysicalName("") 
					Execute("EndOfStatement")
				]
			}]
		}
	]
]
#}SPItemEnd

SPItemBegin =  Column Properties
10000: {#[
		Separator(",")
		 "\r\n\t" PhysicalName("") "  " Datatype("") [DecodeProperty("Timezone Option", "904", " WITH TIME ZONE", "905", " WITH LOCAL TIME ZONE")] "  " 
			[Option("ColumnDefaultValue") [<PushObject("Default Constraint Usage")  [<PushReferenceX("Default Property")  [" DEFAULT  " ExpandErwinMacro("Server Value") " "]PopX("")>] PopX("")>] ]
            [DecodeProperty("Oracle Sort Column", "<TRUE>", " SORT")" "]  
			[DecodeProperty("Oracle Sort Column", "<TRUE>", "<FALSE>","<TRUE>")
			  [" CONSTRAINT  " Option("ConstraintName") QuoteProperty("Null Option Constraint Name") " "] [DecodeProperty("Null Option","0","NULL","1","NOT NULL") " "] [ Option("ConstraintState") [<PushReferenceX("Oracle Constraint State Ref") ["\r\n\t\t\t" IsNotNull(Execute("Constraint State"),"<True>")] PopX("")>]]]
			[Option("ColumnCheckConstraint")
				ForEachChildObject("Check Constraint Usage")
				{
					Separator(",\r\n\t")
					[
						[" CONSTRAINT  " Option("ConstraintName") PhysicalName("")]
						IsNotNull(Execute("Expand Check Value"),"<TRUE>")
						[Option("ConstraintState") [<PushObject("Oracle Constraint State") Execute("Constraint State") PopX("")>]]
					]
				}
			]
		]
#}SPItemEnd

SPItemBegin =  TableColumns
10000:  {#
	[Option("ColumnPhysicalOrder")
		ForEachVectorReference("Physical Order List")
		{
			Execute("Column Properties")
		}
	]	
	[Option("!ColumnPhysicalOrder")
		ForEachVectorReference("Column Order List")
		{
			Execute("Column Properties")
		}
	]
#}SPItemEnd
		

SPItemBegin =  CreatePKConstraint
10000:  {#[
			ForEachChildObject("Key Group")
			{
				[
					IsNotNull(Execute("Constraint In Create Statement"),"<FALSE>")
					DecodeProperty("Generate As Constraint","<TRUE>","<Empty>")
					IsNotNull([CompareStrings(PropertyValue("Key Group Type"),"PK","2")],"<False>")
					Separator(",\r\n")
					IsNotNull(Execute("PKConstraint"),"<TRUE>")
				]
			}
		]
        #}SPItemEnd

SPItemBegin =  CreateAKConstraint				
10000:  {#[
			ForEachChildObject("Key Group")
			{
				[   
					IsNotNull(CompareStrings(PropertyValue("Key Group Type"),"AK","2"),"<FALSE>")
					Separator(",")
					IsNotNull(Execute("AKConstraint"),"<TRUE>")
				]
			}
			
		]
        #}SPItemEnd


SPItemBegin =  CreateFKConstraint				
10000:  {#[             
			ForEachChildObject("Key Group")
			{
				[
					
					IsNotNull([CompareStrings(PropertyValue("Key Group Type"),"IF","2")],"<False>")
					<IsNotNull(Execute("Generate Relation"),"<FALSE>")>
					Separator(",\r\n")
					IsNotNull(Execute("FKConstraint"),"<TRUE>")
				]
			}
			
		]
                        #}SPItemEnd


SPItemBegin =  CreateTableCheckConstraint				
10000:  {#[     
			ForEachChildObject("Check Constraint Usage")
			{
				Separator(",\r\n")
				["CONSTRAINT  " Option("ConstraintName") PhysicalName("")]
				[   [PushReferenceX("Validation Rule Ref")   [" CHECK  (" ExpandErwinMacro("Server Value") ")"]  PopX("")] 
					[Option("ConstraintState") <PushObject("Oracle Constraint State") Execute("Constraint State") PopX("")>]
				]
			}
		]
                #}SPItemEnd
		
SPItemBegin =  KeyGroupMembers
10000:  {#      [
					ForEachVectorReference("Index Member Order List")
					{
						Separator(",")
						"\r\n\t" 
						[IsNotNull([PropertyValue("Attribute Ref")],"<FALSE>") PhysicalName("")]
						[IsNull([PropertyValue("Attribute Ref")]) PropertyValue("Expression")]
						["  " PropertyValue("Key Group Sort Order")]
					}
			]
#}SPItemEnd
		
SPItemBegin =  IsModel
10000:  {#      [
				IsObjectType("Model") "Model"
			]
#}SPItemEnd


SPItemBegin =  Storage
        10000:  {#              [ "\r\n\t\t" "INITIAL " PropertyValue("Oracle Initial")]
				[ "\r\n\t\t" "NEXT " PropertyValue("Oracle Next")]
				[ "\r\n\t\t" "MINEXTENTS " PropertyValue("Oracle MinExtents")]
				[ "\r\n\t\t" "MAXEXTENTS " DecodeProperty("Oracle Max Extent Type","0", "UNLIMITED") ]
				[ "\r\n\t\t" "MAXEXTENTS " DecodeProperty("Oracle Max Extent Type", "1","<Empty>") PropertyValue("Oracle MaxExtents")]
				[ "\r\n\t\t" "PCTINCREASE " PropertyValue("Oracle PctIncrease")]
				[ "\r\n\t\t" "FREELISTS " PropertyValue("Oracle FreeLists")]
				[ "\r\n\t\t" "FREELIST GROUPS " PropertyValue("Oracle Free List Groups")]
				[ "\r\n\t\t" "OPTIMAL " DecodeProperty("Oracle Optimal Size Type", "0", "NULL","1","<Empty>") [PropertyValue("Oracle Optimal")]]
				[ "\r\n\t\t" "BUFFER_POOL " DecodeProperty("Oracle BuffPool", "900","KEEP","901","RECYCLE","902","DEFAULT")]
          #}SPItemEnd

SPItemBegin =  Physical Attributes
        10000: {#[ "\r\n\t" "PCTFREE " PropertyValue("Oracle PctFree")]
		[ "\r\n\t" "PCTUSED " PropertyValue("Oracle PctUsed")]
		[ "\r\n\t" "INITRANS " PropertyValue("Oracle IniTrans")]
		[ "\r\n\t" "MAXTRANS " PropertyValue("Oracle MaxTrans")]
		[ "\r\n\t" "STORAGE ( " IsNotNull(Execute("Storage"),"<TRUE>") "\r\n\t )" ]
                #}SPItemEnd

SPItemBegin =  Segment Attributes
        10000: {#[ "\r\n\t" "TABLESPACE " PushReferenceX("Oracle Tablespace Ref") Name("") PopX("")]
		[ "\r\n\t" DecodeProperty("Oracle NoLogging","<TRUE>","NOLOGGING","<FALSE>","LOGGING")]
		[Execute("Physical Attributes")]
                #}SPItemEnd

SPItemBegin =  Supplemental Key Log
        10000: {#[ DecodeProperty("Oracle Supplemental Key Log All", "<TRUE>", "ALL")[InsertComma("Oracle Supplemental Key Log All")]]
		[DecodeProperty("Oracle Supplemental Key Log PK", "<TRUE>", "PRIMARY KEY")[InsertComma("Oracle Supplemental Key Log PK")]]
		[DecodeProperty("Oracle Supplemental Key Log Unique", "<TRUE>", "UNIQUE")[InsertComma("Oracle Supplemental Key Log Unique")]]
		[DecodeProperty("Oracle Supplemental Key Log FK", "<TRUE>", "FOREIGN KEY")]
                #}SPItemEnd

SPItemBegin =  Materailized View Log With Clause
        10000: {#[" " DecodeProperty("Use Object Id","<TRUE>","OBJECT ID") [InsertComma("Use Object Id")]]
		[" " DecodeProperty("Use Primary Key","<TRUE>","PRIMARY KEY") [InsertComma("Use Primary Key")]]
		[" " DecodeProperty("Use Row Id","<TRUE>","ROWID") [InsertComma("Use Row Id")]]
		[" " DecodeProperty("Use Sequence","<TRUE>","SEQUENCE") ]
		[
			"("
			ForEachVectorReference("Columns Ref")
			{
				Separator(",")
				PhysicalName("")
			}
			")"
		]
                #}SPItemEnd

SPItemBegin =  Materialized View Refresh
10000: {#["\r\n\t\t" DecodeProperty("Refresh Type","912","FAST","913","COMPLETE","914","FORCE") ]
		["\r\n\t\t" "ON " DecodeProperty("Refresh On What","915","DEMAND","916","COMMIT") ]
		["\r\n\t\t" "START WITH "PropertyValue("Refresh Start Date") ]
		["\r\n\t\t" "NEXT "PropertyValue("Refresh Next Date") ]
		["\r\n\t\t" "WITH " DecodeProperty("Refresh With Key","917","PRIMARY KEY","918","ROWID") ]
		[
            [ "\r\n\t\t" "USING " IsNotNull(Execute("Materialized View Referesh Using Clause"),"<TRUE>") ]
            [ "\r\n\t\t\t" [ "USING " IsNull(Execute("Materialized View Referesh Using Clause")) ] DecodeProperty("Oracle Using Constraint Type","0","ENFORCED","1","TRUSTED") " CONSTRAINTS"]

        ]
                #}SPItemEnd

SPItemBegin =  Materialized View Referesh Using Clause
        10000: {#["\r\n\t\t\t" DecodeProperty("Refresh Local Rollback Seg State","902","DEFAULT") " LOCAL ROLLBACK SEGMENT "  ]
		["\r\n\t\t\t" DecodeProperty("Refresh Local Rollback Seg State","919","<Empty>") " LOCAL ROLLBACK SEGMENT "   PushReferenceX("Refresh Local Rollback Seg Reference") Name("") PopX("") ]
		["\r\n\t\t\t" DecodeProperty("Refresh Master Rollback Seg State","902","DEFAULT") " MASTER ROLLBACK SEGMENT " ]
		["\r\n\t\t\t" DecodeProperty("Refresh Master Rollback Seg State","919","<Empty>") " MASTER ROLLBACK SEGMENT " PushReferenceX("Refresh Master Rollback Seg Reference") Name("") PopX("") ]
        #}SPItemEnd

SPItemBegin =  LOB Parameters
        10000: {#[ "\r\n\t" "TABLESPACE " PushReferenceX("Oracle Tablespace Ref") Name("") PopX("")]
			[ "\r\n\t" DecodeProperty("Enable Storage In Row","<TRUE>","ENABLE","<FALSE>","DISABLE") " STORAGE IN ROW" ]
			[
			    PushObject("Oracle Physical Storage")[ "\r\n\t" "STORAGE ( " IsNotNull(Execute("Storage"),"<TRUE>") "\r\n\t )"  ]PopX("") 
			]       
			[ "\r\n\t" "CHUNK " PropertyValue("Oracle Chunk")]
			[ "\r\n\t" "PCTVERSION " PropertyValue("Oracle Percent Version")]
			[ "\r\n\t" DecodeProperty("Oracle Retain Version","<TRUE>","RETENTION")]
			[ "\r\n\t" "FREEPOOLS " PropertyValue("Oracle Freepools")]
			[ "\r\n\t" DecodeProperty("Oracle Cache","<TRUE>","CACHE") ]
			[ "\r\n\t" DecodeProperty("Oracle Cache","<FALSE>","NOCACHE") " "   [DecodeProperty("Oracle NoLogging","<TRUE>","NOLOGGING","<FALSE>","LOGGING")]]
			[ "\r\n\t" DecodeProperty("Oracle Cache Read","<TRUE>","CACHE READS") " " [DecodeProperty("Oracle NoLogging","<TRUE>","NOLOGGING","<FALSE>","LOGGING")]]
                #}SPItemEnd

SPItemBegin =  Lob Storage Properties
10000: {#[
			[" STORE AS " [IsNull(Execute("Unnamed")) Name("") " " ] [PushObject("Oracle LOB Parameters")[" ( " IsNotNull(Execute("LOB Parameters"),"<TRUE>") ")"] PopX("")]]
		]
                #}SPItemEnd
		
SPItemBegin =  Lob Storage
        10000: {#[   "\r\n\t" "LOB " "("
			ForEachVectorReference("Columns Ref")
			{
				Separator(",")
				PhysicalName("")
			}
			")"
			Execute("Lob Storage Properties")
		]
                #}SPItemEnd

SPItemBegin =  Partitioning Storage
        10000: {# ["\r\n\t" "TABLESPACE " PushReferenceX("Oracle Tablespace Ref") Name("") PopX("") ]
	     ["\r\n\t" DecodeProperty("Index Overflow","<TRUE>","OVERFLOW") "  " ["TABLESPACE " PushReferenceX("Oracle Overflow Tablespace Ref") Name("") PopX("") ]]
	     [
			ForEachChildObject("Oracle LOB Storage")
			{
				"\r\n\t" "LOB (" 
                    ForEachVectorReference("Columns Ref")
        			{
		        		Separator(",")
        				PhysicalName("")
        			}
		        ")" 
                " STORE AS " [IsNull(Execute("Unnamed")) Name("")] [" ( "  "TABLESPACE " PushReferenceX("Oracle Tablespace Ref") Name("") PopX("") " ) "]
			}
		 ]
                #}SPItemEnd

SPItemBegin = Sub-partitions Have Name
10000:
{#
    [ 
		ForEachChildObject("Oracle Subpartition Spec","Order")
		{
            IsNull(Execute("Unnamed")) Name("")
		}
	]
#}
SPItemEnd

SPItemBegin =  Partition Description
        10000: {#[PushReferenceX("Oracle Regular Storage Ref") Execute("Segment Attributes") PopX("")]
		["\r\n\t" DecodeProperty("Compress Type","919","COMPRESS","918","NOCOMPRESS")" " [ PropertyValue("Compress Prefix Length")]]
		["\r\n\t" DecodeProperty("Index Overflow","<TRUE>","<Empty>") " OVERFLOW "
				  [PushReferenceX("Oracle Overflow Storage Ref") Execute("Segment Attributes") PopX("")]
		]
		[
			ForEachChildObject("Oracle LOB Storage")
			{
				Execute("Lob Storage")
			}
		]
		[
            /* If it is not hash quantity or sub partitions list, we have composite-list */
            IsNull([DecodeProperty("Oracle Partition Level Subpartition Type","1","GENERATE")])
            IsNull([DecodeProperty("Oracle Partition Level Subpartition Type","2","GENERATE")])
            IsNotNull([Execute("Sub-partitions Have Name")],"<FALSE>")
			"\r\n\t" "("
				ForEachChildObject("Oracle Subpartition Spec","Order")
				{
					Separator(",\r\n\t")
					[ "SUBPARTITION " IsNull(Execute("Unnamed")) Name("") "  "] [" VALUES ( " ExpandVector("Partition Values") " ) " ]
							[PushObject("Oracle Partitioning Storage") Execute("Partitioning Storage") PopX("")]
				}
				")"
		]
		[
			DecodeProperty("Oracle Partition Level Subpartition Type","1","<Empty>")
			["\r\n\t" "SUBPARTITIONS " PropertyValue("Oracle Hash Partition Quantity")]
				[ " STORE IN ("
					ForEachVectorReference("Oracle Tablespaces Ref")
					{
						Separator(",")
						Name("")
					}
					")"
				]
		]

		[
			DecodeProperty("Oracle Partition Level Subpartition Type","2","<Empty>")
			"\r\n\t" "("
				ForEachChildObject("Oracle Subpartition Spec","Order")
				{
					Separator(",\r\n\t")
					"SUBPARTITION " [IsNull(Execute("Unnamed")) Name("") "  "] [" VALUES ( " ExpandVector("Partition Values") " ) " ]
							[PushObject("Oracle Partitioning Storage") Execute("Partitioning Storage") PopX("")]
				}
				")"
		]
                #}SPItemEnd

SPItemBegin =  Index Created As Part of Constraint
        10000: {#[
			IsNotNull(Execute("Constraint In Create Statement"),"<TRUE>")
			[Option("ConstraintState") <PushObject("Oracle Constraint State") [ DecodeProperty("Use Index","908","Using Index") ] PopX("")>]
	]
        #}SPItemEnd
	
SPItemBegin =  Index Is Not Generated
10000: {#[      
			[IsNull(Execute("Index Create Option")) "Index Not Created"]
			[IsNotNull(Execute("Index Create Option")) IsNull([Generate("") "Generated"]) "Index Not Picked For Generation"]
]
#}SPItemEnd
				
SPItemBegin =  Unnamed
        10000: {#[
				PropertyValue("Is Unnamed")
			]
#}SPItemEnd


SPItemBegin =  Index Generated
        10000: {#[
				Generate("")
				IsNotNull(Execute("Index Create Option"),"<False>")		
				" Index Generated"
			]
#}SPItemEnd

SPItemBegin =  Is Temporary Table
        10000: {#[
	            PushTopLevelObject("")
			    [
		            IsObjectType("Entity") 
		            DecodeProperty("Oracle Temporary", "<TRUE>", " GLOBAL TEMPORARY")
		        ]
		        PopX("")
			]
#}SPItemEnd


SPItemBegin =  IsIndexOrganized
        10000: {#[
		        PushOwner("")
		        [   /*View cannot be index organized*/
		            IsNull([IsObjectType("View") " View"])
			        DecodeProperty("Oracle Data Storage Type","1","ORGANIZATION") DecodeProperty("Data Organization Type","912","INDEX")
		        ]
		        PopX("")	
			]
#}SPItemEnd


SPItemBegin =  Constraint In Create Statement
        10000: {#[DecodeProperty("Generate As Constraint","<TRUE>","<Empty>")
				[ CompareStrings(PropertyValue("Key Group Type"),"PK","2")	"PK"	Option("PKConstraintInCreate")   ]
				[ CompareStrings(PropertyValue("Key Group Type"),"PK","2")	"PK" IsNotNull(Execute("IsIndexOrganized"),"<FALSE>") ]
				[ CompareStrings(PropertyValue("Key Group Type"),"AK","2")	"AK"	Option("AKConstraintInCreate")	  ]
				[ CompareStrings(PropertyValue("Key Group Type"),"IF","2")	"IF"	Option("FKConstraintInCreate")   ]
			]
#}SPItemEnd



SPItemBegin =  Constraint In Alter Statement
        10000: {#[
				[ CompareStrings(PropertyValue("Key Group Type"),"PK","2")	"PK"	Option("PKConstraintInAlter") 
					IsNull(Execute("IsIndexOrganized"))
				  ]
				[ CompareStrings(PropertyValue("Key Group Type"),"AK","2")	"AK"	Option("AKConstraintInAlter")	  ]
				[ CompareStrings(PropertyValue("Key Group Type"),"IF","2")	"IF"	Option("FKConstraintInAlter")   ]
	]
#}SPItemEnd


SPItemBegin =  Using Index Specify Name
        10000: {#[
				[PushOwnerX("")
						[IsNotNull(Execute("Constraint In Alter Statement"),"<FALSE>")
						"Specify Name"]
				PopX("")]	
	]
#}SPItemEnd


SPItemBegin =  Using Index Specify Create
        10000: {#[
				[
					PushOwnerX("")
				    [
						IsNotNull(Execute("Constraint In Create Statement"),"<FALSE>")
						"Specify Create Statement"
					]
					PopX("")
				]	
			]
#}SPItemEnd

SPItemBegin =  Constraint State
10000: {#
              [ "  " DecodeProperty("Deferrable", "<TRUE>","<Empty>", "<FALSE>", "NOT") " DEFERRABLE" ]
              [ "  INITIALLY " DecodeProperty("Immediate", "<TRUE>", "IMMEDIATE", "<FALSE>", "DEFERRED")]
              [ "  " DecodeProperty("Rely", "<TRUE>", "RELY", "<FALSE>", "NORELY")]
              [ IsNotNull(Execute("Is Owner Table Key Group"),"<FALSE>") IsNotNull(Execute("Using Index Specify Name"),"<False>") 
                DecodeProperty("Use Index","908","<Empty>") "  USING INDEX " 
                [
                  PushOwnerX("") [Generate("") [Owner("")"."]PhysicalName("")] PopX("")
                ]
                [
                  PushOwnerX("") Execute("Create Key Group Raw Body") "\r\n" PopX("")
                ]
              ]
              [ IsNotNull(Execute("Is Owner Table Key Group"),"<FALSE>") IsNotNull(Execute("Using Index Specify Create"),"<False>")
                DecodeProperty("Use Index","908","<Empty>") "  USING INDEX "
                [
                  [
                    PushOwnerX("") 
                    "\r\n" "(" "\r\n" Execute("Create Key Group Raw") "\r\n" ")" "\r\n" PopX("")
                  ]
                  [
                    PushOwnerX("")
                    IsNotNull(Execute("Constraint In Create Statement"),"<FALSE>")
                    ["\r\n" "(" "\r\n" IsNotNull(Execute("Create Key Group Raw"),"<TRUE>") "\r\n" ")" "\r\n"]
                    PopX("")
                  ]
                  [
                    PushOwnerX("") Execute("Create Key Group Raw Body") "\r\n" PopX("")
                  ]
                ]
              ]
              [ "  " DecodeProperty("Enabled", "<TRUE>", "ENABLE", "<FALSE>", "DISABLE")]
              [ "  " DecodeProperty("Validate", "<TRUE>", "VALIDATE", "<FALSE>", "NOVALIDATE")]
#}SPItemEnd

SPItemBegin =  Index Attributes
        10000: {#[PushObject("Oracle Physical Storage") Execute("Physical Attributes") PopX("") ]
		[ "\r\n\t" DecodeProperty("Oracle NoLogging", "<TRUE>", "NOLOGGING","<FALSE>","LOGGING")]
		[ "\r\n\t" DecodeProperty("Online", "<TRUE>", "ONLINE")]
		[ "\r\n\t" DecodeProperty("Compute Statistics","<TRUE>","COMPUTE STATISTICS")]
		[ "\r\n\t" "TABLESPACE "  PushReferenceX("Oracle Tablespace Ref") Name("") PopX("")]
		[ "\r\n\t" "TABLESPACE " DecodeProperty("Oracle Tablespace Usage Type", "0", "DEFAULT")]
		[ "\r\n\t" DecodeProperty("Compress Type", "919", "COMPRESS", "918","NOCOMPRESS") " " [ PropertyValue("Compress Prefix Length")]]
		[ "\r\n\t" DecodeProperty("Oracle NoSort","<TRUE>","NOSORT","<FALSE>","SORT")]
		[ "\r\n\t" DecodeProperty("Oracle Reverse Store","<TRUE>","REVERSE")]
		[ "\r\n\t" DecodeProperty("Use Parallel", "904", "PARALLEL", "905","NOPARALLEL") [" "  PropertyValue("Oracle Parallel")  ]]
        #}SPItemEnd

SPItemBegin =  Physical Properties
10000: {#[
			DecodeProperty("Oracle Data Storage Type","0","<Empty>")
			[PushReferenceX("Oracle Regular Storage Ref") Execute("Segment Attributes") PopX("")]
			["\r\n\t" DecodeProperty("Compress Type","919","COMPRESS","918","NOCOMPRESS") " " ]
		]


		[
			DecodeProperty("Oracle Data Storage Type","1","<Empty>")
			
			[
				DecodeProperty("Data Organization Type","912","<Empty>")
				"\r\n\t"  "ORGANIZATION INDEX "
				[PushReferenceX("Oracle Index Storage Ref") Execute("Segment Attributes") PopX("")]
				["\r\n\t" DecodeProperty("Table Mapping","915","MAPPING TABLE","916","NOMAPPING")]
				["\r\n\t" "PCTTHRESHOLD " PropertyValue("Pct Threshold")]
				["\r\n\t" DecodeProperty("Compress Type","919","COMPRESS","918","NOCOMPRESS")" " [ PropertyValue("Compress Prefix Length")]]
				["\r\n\t" ["INCLUDING "PushReference("Including Column") PhysicalName("") PopX("") ] DecodeProperty("Index Overflow","<TRUE>","<Empty>") " OVERFLOW "
							[PushReferenceX("Oracle Overflow Storage Ref") Execute("Segment Attributes") PopX("")]]
			]

			[
				DecodeProperty("Data Organization Type","913","<Empty>")
				"\r\n\t"  "ORGANIZATION EXTERNAL "
				" ( "
				["\r\n\t\t" "TYPE " PropertyValue("Access Driver")]
				["\r\n\t\t" "DEFAULT DIRECTORY " PushReferenceX("Oracle Directory Ref") Name("") PopX("")  ]
				[DecodeProperty("Access Parameter Type", "1","<FALSE>", "<TRUE>") "\r\n\t\t" "ACCESS PARAMETERS " "\r\n\t\t ( " PropertyValue("Access Parameters") "\r\n\t\t" ")"]
				[DecodeProperty("Access Parameter Type", "1", "<TRUE>")  "\r\n\t\t" "ACCESS PARAMETERS " "USING CLOB" "\r\n\t\t  " PropertyValue("Access Parameters") ]
				"\r\n\t\t" "LOCATION " "("
				ForEachChildObject("Oracle Location")
				{
					Separator(", ")
					[PushReferenceX("Oracle Directory Ref") Name("") PopX("") ":"]
					"'"PropertyValue("Name")"'"
				}
				")"
				"\r\n\t\t ) "
				["\r\n\t\t" "REJECT LIMIT " PropertyValue("Reject Limit")]
				["\r\n\t\t" "REJECT LIMIT " DecodeProperty("Reject Limit Type","0","UNLIMITED")]
			]

		]

		[
			DecodeProperty("Oracle Data Storage Type","2","<Empty>")
			"\r\n\t" "CLUSTER"  "  " PushReferenceX("Oracle Cluster Ref") [Owner("")"."]Name("") PopX("")  " ("
			ForEachVectorReference("Oracle Cluster Columns Ref")
			{
				Separator(",")
				PhysicalName("")
			}
			")"

		]
                #}SPItemEnd

SPItemBegin =  Subpartition Template
10000: {#[
			DecodeProperty("Oracle Template Subpartition Type","0","<Empty>")
			"("
			ForEachChildObject("Oracle Partition Template")
			{
				Separator(",")
				"\r\n\t" "SUBPARTITION " [IsNull(Execute("Unnamed")) Name("")] [" VALUES (" IsNotNull(ExpandVector("Partition Values"),"<TRUE>") ")"]
				[PushObject("Oracle Partitioning Storage") Execute("Partitioning Storage") PopX("")]
			}
			"\r\n\t"
			")"

		]

		[
			DecodeProperty("Oracle Template Subpartition Type","1","<Empty>")
			[" " PropertyValue("Oracle Hash Partition Quantity")]
			[
				"\r\n\t" "STORE IN ("
				ForEachVectorReference("Oracle Tablespaces Ref")
				{
					Separator(",")
					Name("")
				}
				")"
			]

			[
				"\r\n\t" "OVERFLOW STORE IN ("
				ForEachVectorReference("Oracle Overflow Tablespaces Ref")
				{
					Separator(",")
					Name("")
				}
				") "
			]
		]
#}SPItemEnd

SPItemBegin =  Table Partition
10000: {#[
			DecodeProperty("Oracle Partition Type","1","<Empty>")
			[
				PushObject("Oracle Range Partition")
				[
					"\r\n\t" "PARTITION BY RANGE ("
					ForEachVectorReference("Columns Ref")
					{
						Separator(",")
						PhysicalName("")
					}
					")"
					"\r\n\t" "(" 
					ForEachChildObject("Oracle Range Partition Info","Order")
					{
						Separator(",\r\n\t")
						"PARTITION " [IsNull(Execute("Unnamed")) Name("")] " VALUES LESS THAN "
						"(" ExpandVector("Partition Values") ")"
						[PushObject("Oracle Partition Description") Execute("Partition Description") PopX("")]
					}
					")"
				]
				PopX("")
			]
		]

		[
			DecodeProperty("Oracle Partition Type","2","<Empty>")
			[
				PushObject("Oracle List Partition")
				[
					"\r\n\t" "PARTITION BY LIST ("
						PushReferenceX("Column Ref") Name("") PopX("") 
					")"
					"\r\n\t" "("
					ForEachChildObject("Oracle List Partition Info","Order")
					{
						Separator(",")
						"\r\n\t" 
						"PARTITION " [IsNull(Execute("Unnamed")) Name("")] " VALUES "
						"(" ExpandVector("Partition Values") ")"
						[PushObject("Oracle Partition Description") Execute("Partition Description") PopX("")]
					}
					")"
				]
				PopX("")
			]
		]
		
	[
		DecodeProperty("Oracle Partition Type","3","<Empty>")
		[
			PushObject("Oracle Hash Partition")
			[
				"\r\n\t" "PARTITION BY HASH ("
				ForEachVectorReference("Columns Ref")
				{
					Separator(",")
					PhysicalName("")
				}
				")"
				[
					DecodeProperty("Oracle Hash Partition Type","0","<Empty>")
					"\r\n\t" "("
					ForEachChildObject("Oracle Individual Hash Partition","Order")
					{
						Separator(",")
						"\r\n\t"
						"PARTITION " [IsNull(Execute("Unnamed")) Name("")]
						[PushObject("Oracle Partitioning Storage") Execute("Partitioning Storage") PopX("")]
					}
					")"
				]
				[
					DecodeProperty("Oracle Hash Partition Type","1","<Empty>")
					["\r\n\t" "PARTITIONS " PropertyValue("Oracle Hash Partition Quantity")]
					[
						" STORE IN ("
						ForEachVectorReference("Oracle Tablespaces Ref")
						{
							Separator(",")
							Name("")
						}

						" ) "

					]

					[
						" OVERFLOW STORE IN ("
						ForEachVectorReference("Oracle Overflow Tablespaces Ref")
						{
							Separator(",")
							Name("")
						}

						" ) "

					]
				]
			]
		PopX("")
		]
	]
	
	[	
		DecodeProperty("Oracle Partition Type","4","<Empty>")
		[   
			PushObject("Oracle Composite Partition")
			[
				"\r\n\t" "PARTITION BY RANGE ("
				ForEachVectorReference("Columns Ref")
				{
					Separator(",")
					PhysicalName("")
				}
				")"
				[
				DecodeProperty("Oracle Composite Subpartition Type","0","<Empty>")
				"\r\n\t" "SUBPARTITION 	BY LIST (" PushReferenceX("Column Ref") PhysicalName("") PopX("") ")"
					[ "\r\n\t" "SUBPARTITION TEMPLATE"  IsNotNull(Execute("Subpartition Template"),"<TRUE>") ]
				]
				
				[
					DecodeProperty("Oracle Composite Subpartition Type","1","<Empty>")
					"\r\n\t" "SUBPARTITION 	BY HASH ("
					ForEachVectorReference("Oracle Hash Columns Ref")
					{
						Separator(",")
						PhysicalName("")
					}
					")"
					[
						DecodeProperty("Hash Subpartition Type","1","<Empty>")
						"\r\n\t" "SUBPARTITIONS 	" PropertyValue("Oracle Hash Partition Quantity")
							[ " STORE IN ("
								ForEachVectorReference("Oracle Tablespaces Ref")
								{
									Separator(",")
									Name("")
								}
								")"
							]
					]

					[
						DecodeProperty("Hash Subpartition Type","0","<Empty>")
						["\r\n\t" "SUBPARTITION TEMPLATE " IsNotNull(Execute("Subpartition Template"),"<TRUE>") ]
					]


				]
				
				[  "\r\n\t("
					ForEachChildObject("Oracle Range Partition Info","Order")
					{
						Separator("\r\n\t,")
						"PARTITION " [IsNull(Execute("Unnamed")) Name("")] " VALUES LESS THAN "
						"(" ExpandVector("Partition Values") ")"
						[ PushObject("Oracle Partition Description") Execute("Partition Description") PopX("")]
					}
					")"
				]

			]
			PopX("")
		]
	]
#}SPItemEnd

SPItemBegin =  Physical File Spec
10000: {#[

			"\t"["'" IsNull(Execute("Unnamed")) PropertyValue("Name") "' "] ["SIZE " PropertyValue("Oracle File Size")]
            ["  " DecodeProperty("Oracle Reuse File","<TRUE>","REUSE")]
			["  " "AUTOEXTEND " DecodeProperty("Auto Extend","<TRUE>","ON","<FALSE>","OFF") [" NEXT " PropertyValue("Auto Extend Next Value") ]
			[" MAXSIZE " DecodeProperty("Oracle Max Extent Type","0","UNLIMITED")][" MAXSIZE " PropertyValue("Auto Extend Max Size")] ]
		]
                        #}SPItemEnd

SPItemBegin =  Data File
10000: {#[
			ForEachChildObject("Oracle Physical File","Order")
			{
				Execute("Physical File Spec")
				Separator(",\r\n")

			}
		]
#}SPItemEnd

SPItemBegin =  System Data File
10000: {#[
			ForEachChildObject("Oracle Physical File","Order")
			{
				Separator(",\r\n")
				Execute("Physical File Spec")

			}
		]
#}SPItemEnd


SPItemBegin =  Physical File
10000: {#[
			ForEachChildObject("Oracle Physical File","Order")
			{
				Separator(",\r\n")
				Execute("Physical File Spec")
			}
		]
                #}SPItemEnd

SPItemBegin =  Permanent Tablespace Storage
10000: {#       [DecodeProperty("Compress Type", "919", "COMPRESS","918","NOCOMPRESS") " "]
			[PushObject("Oracle Physical Storage") ["\r\n\t" "STORAGE ( " IsNotNull(Execute("Storage"),"<TRUE>") "\r\n\t )"]  PopX("")]
#}SPItemEnd
				
SPItemBegin =  Permanent Tablespace
10000: {#               ["\r\n\t" "DATAFILE " "\r\n" IsNotNull(Execute("Physical File"),"<TRUE>")]
			[ "\r\n\t" "MINIMUM EXTENT " PropertyValue("Minimum Extent")]
			[ "\r\n\t" "BLOCKSIZE " PropertyValue("Blocksize Value")]
			[ "\r\n\t" DecodeProperty("Oracle NoLogging", "<TRUE>", "NOLOGGING","<FALSE>","LOGGING")]
			[ "\r\n\t" DecodeProperty("Force Logging", "<TRUE>", "FORCE LOGGING")]
			[ "\r\n\t" "DEFAULT " IsNotNull(Execute("Permanent Tablespace Storage"),"<TRUE>")]
			[ "\r\n\t" DecodeProperty("Oracle Offline", "<TRUE>", "OFFLINE","<FALSE>","ONLINE")]
			[DecodeProperty("Extent Management Type", "922", "<TRUE>")
					["\r\n\t" DecodeProperty("Tablespace Type","1", " TEMPORARY","2"," PERMANENT")]
			]
			[ "\r\n\t" "EXTENT MANAGEMENT " DecodeProperty("Extent Management Type", "922", "DICTIONARY","923","LOCAL")
						["  " DecodeProperty("Local Extent Management Type", "920", "AUTOALLOCATE","921","UNIFORM") [" " "SIZE " PropertyValue("Extent Size") ]]]
			[ "\r\n\t" "SEGMENT SPACE MANAGEMENT " DecodeProperty("Segment Management Type", "927", "MANUAL","926","AUTO")]
			[ "\r\n\t" "FLASHBACK " DecodeProperty("Flashback Mode", "<TRUE>", "ON","<FALSE>","OFF")]
        #}SPItemEnd

SPItemBegin =  Temporary Tablespace
10000: {#
	[ "\r\n\t" "TEMPFILE" "\r\n" IsNotNull(Execute("Physical File"),"<TRUE>")]
	[ "\r\n\t" "TABLESPACE GROUP " PushReferenceX("Tablespace Group Ref") Name("") PopX("")]
	[ "\r\n\t" "BLOCKSIZE " PropertyValue("Blocksize Value")]
	[ "\r\n\t" DecodeProperty("Force Logging", "<TRUE>", "FORCE LOGGING")]
	[ "\r\n\t" "EXTENT MANAGEMENT " DecodeProperty("Extent Management Type", "922", "DICTIONARY","923","LOCAL")
						["  " DecodeProperty("Local Extent Management Type", "920", "AUTOALLOCATE","921","UNIFORM") [" " "SIZE " PropertyValue("Extent Size") ]]]
	[ "\r\n\t" "SEGMENT SPACE MANAGEMENT " DecodeProperty("Segment Management Type", "927", "MANUAL","926","AUTO")]
	[ "\r\n\t" "FLASHBACK " DecodeProperty("Flashback Mode", "<TRUE>", "ON","<FALSE>","OFF")]
        #}SPItemEnd

SPItemBegin =  Undo Tablespace
10000: {#       [ "\r\n\t" "DATAFILE" "\r\n" IsNotNull(Execute("Physical File"),"<TRUE>")]
			[ "\r\n\t" "EXTENT MANAGEMENT " DecodeProperty("Extent Management Type", "922", "DICTIONARY","923","LOCAL")
							["  " DecodeProperty("Local Extent Management Type", "920", "AUTOALLOCATE","921","UNIFORM") [" " "SIZE " PropertyValue("Extent Size") ]]]
			[ "\r\n\t" "BLOCKSIZE " PropertyValue("Blocksize Value")]
			[ "\r\n\t" DecodeProperty("Oracle Offline", "<TRUE>", "OFFLINE","<FALSE>","ONLINE")]
			[ "\r\n\t" "FLASHBACK " DecodeProperty("Flashback Mode", "<TRUE>", "ON","<FALSE>","OFF")]
			[ "\r\n\t" "RETENTION "DecodeProperty("Retention Guarantee", "<TRUE>", "GUARANTEE", "<FALSE>", "NOGUARANTEE")]
        #}SPItemEnd

SPItemBegin =  Drop Synonyms For This Object
10000: {#[
		ForEachChildObject("Synonym")
		{
			[
				Generate("")
				Execute("Drop Synonym")
			]
		}
	]
#}SPItemEnd

SPItemBegin =  Create Synonyms For This Object
10000: {#[
			ForEachChildObject("Synonym")
			{
				[
					Generate("")
					Execute("Create Synonym")
				]
			}
		]
                #}SPItemEnd

SPItemBegin =  Accumulate Migrating Columns
10000: {#
		[
			ForEachVectorReference("Migrating Columns")
			{
				Separator(",")
				PhysicalName("")			
			}		
		]
#}SPItemEnd

SPItemBegin =  Accumulate FK Columns
10000: {#
		[
			ForEachVectorReference("FK Columns")
			{
				Separator(",")
				PhysicalName("")			
			}		
		]
#}SPItemEnd

		
SPItemBegin =  Accumulate Columns
10000: {#
		[
			[	
				IsObjectType("Entity")
				[Option("ColumnPhysicalOrder")
					ForEachVectorReference("Physical Order List")
					{
						Separator(",")
						PhysicalName("")
					}
				]
						    
				[Option("!ColumnPhysicalOrder")
					ForEachVectorReference("Column Order List")
					{
						Separator(",")
						PhysicalName("")		     
					}
				]
			]
			
			[	
				IsObjectType("Key Group")
				ForEachVectorReference("Index Member Order List")
				{
					Separator(",")
					PhysicalName("")		     
				}
			]
		]
		
#}SPItemEnd

SPItemBegin =  PKConstraint
10000: {#[      
			DecodeProperty("Generate As Constraint","<TRUE>","<Empty>")
			IsNotNull([CompareStrings(PropertyValue("Key Group Type"),"PK","2")],"<False>")
			Once("Constraint")
			["CONSTRAINT  " Option("ConstraintName") QuoteProperty("Constraint Name")]
			" PRIMARY KEY "
			"("
			IsNotNull(	Execute("Accumulate Columns"), "<TRUE>"	)
			")"
			[
                Option("ConstraintState") 
				[
					PushObject("Oracle Constraint State")
						Execute("Constraint State") 
					PopX("")
				 ]
				[ Option("PKConstraintInAlter")
					IsNull(Execute("IsIndexOrganized"))
					PushObject("Oracle Constraint State")
					[" EXCEPTIONS INTO " PushReferenceX("Exception Table Ref")  [Owner("")"."]PhysicalName("") PopX("")]
					PopX("")
				]
            ]
		]
#}SPItemEnd

SPItemBegin =  AKConstraint
10000: {#[
		DecodeProperty("Generate As Constraint","<TRUE>","<EMPTY>")
		IsNotNull([CompareStrings(PropertyValue("Key Group Type"),"AK","2")],"<False>")
		Once("Constraint")
		["CONSTRAINT  " Option("ConstraintName") QuoteProperty("Constraint Name")]
		" UNIQUE "
		"("
		IsNotNull(	Execute("Accumulate Columns"), "<TRUE>"	)
		")"
        [
            Option("ConstraintState") 
            <PushObject("Oracle Constraint State")
            Execute("Constraint State") 
            [ Option("AKConstraintInAlter") " EXCEPTIONS INTO " PushReferenceX("Exception Table Ref")  [Owner("")"."]PhysicalName("") PopX("")]
            PopX("")>
        ]
	]
#}SPItemEnd

SPItemBegin =  Generate Child Entity
10000: {#[
			[
				PushReferenceX("Child Entity Ref")
				[
					Generate("") 
					"Generate"
				]
				PopX("")
			]
		]
#}SPItemEnd

SPItemBegin =  Generate Parent Entity
10000: {#[
			[
				PushReferenceX("Parent Entity Ref")
				[					
					[IsObjectType("Entity")
							Generate("") "Generate"
					]
					[IsObjectType("Subtype Symbol")
						[
							/* there can be only one of these*/
							ForEachVectorReference("Child Relations Ref")
							{
								[
									PushReferenceX("Parent Entity Ref")
										[
											Generate("") "Generate"
										]
									PopX("")
								]
							}
						]
					]

				]
				PopX("")
			]
		]
#}SPItemEnd


SPItemBegin =  Generate Relation
10000: {#[
			[
				PushReferenceX("Relationship Ref")
				[
					Generate("") 
					IsNotNull(Execute("Generate Child Entity"),"<FALSE>")
					"Generate"
					
				]
				PopX("")
			]
			
			
			[IsAlterScript("")
				/*Generate if the object referenced by the deleted object has also been deleted.*/
				/*If the object referenced by the deleted object is still active, then check the Generate property on the referenced object*/
				
				IsDeleted("") 
				PushOldReferenceX("Relationship Ref")
				[
					/* The relationship referenced by the KeyGroup has been deleted*/
					/*FK indexes are maintained as long as the relationship is active*/
					[IsDeleted("")
						PushOldReferenceX("Child Entity Ref")
						[
							[/* The Child Entity referenced by the deleted relationship has also been deleted*/
								IsDeleted("")
									"Generate"
							]
							[
							 /* The Child Entity referenced by the deleted relationship is still active*/
								IsNull([IsDeleted("") "Not Deleted"])
								Generate("")
								"Generate"
							]
						]
						PopX("")					
					]
				]
				PopX("")
			]
		]
#}SPItemEnd

SPItemBegin =  Generate View Relation
10000: {#[
			[
				PushFKViewRelationship("")
				[
					Generate("") "Generate"
				]
				PopX("")
			]
		]
#}SPItemEnd

SPItemBegin =  ViewFKConstraint
10000: {#[
		<IsNotNull(Execute("Generate View Relation"),"<FALSE>")>
		IsNotNull([CompareStrings(PropertyValue("Key Group Type"),"IF","2")],"<False>")
		Once("Constraint")
		["CONSTRAINT " Option("ConstraintName") 
			QuoteProperty("Constraint Name")	
		]
		" FOREIGN KEY "
		"("
		[IsNotNull(	Execute("Accumulate Columns"), "<TRUE>"	)]
		")"
		" REFERENCES "
					[<PushFKViewRelationship("")
							[
								PushReferenceX("Parent Entity Ref")
									[Owner("")"."]PhysicalName("")
								PopX("")
							]
					PopX("")
					>]
			[ Option("ConstraintState") <PushObject("Oracle Constraint State") Execute("Constraint State") PopX("")>]
	]
#}SPItemEnd


SPItemBegin =  FKConstraint
10000: {#[
		IsNotNull([CompareStrings(PropertyValue("Key Group Type"),"IF","2")],"<False>")
		<IsNotNull(Execute("Generate Relation"),"<FALSE>")>
		Once("Constraint")
		["CONSTRAINT  " Option("ConstraintName") 
			[<PushReferenceX("Relationship Ref")
			PhysicalName("")
			PopX("")>]	
		]
		" FOREIGN KEY "
		"("
		IsNotNull(	Execute("Accumulate FK Columns"), "<TRUE>"	)
		")"
		" REFERENCES "
					[<PushReferenceX("Relationship Ref")
							[
								PushReferenceX("Parent Entity Ref")
									[IsObjectType("Entity")
										[Owner("")"."]PhysicalName("")
									]
									[IsObjectType("Subtype Symbol")
										[
											/* there can be only one of these*/
											ForEachVectorReference("Child Relations Ref")
											{
												[
													PushReferenceX("Parent Entity Ref")
														[Owner("")"."]PhysicalName("")
													PopX("")
												]
											}
										]
									]
								PopX("")
							]
					PopX("")
					>]
	
					"("
						[IsNotNull(	Execute("Accumulate Migrating Columns"), "<TRUE>"	)]
					")"
	
					
					[<PushReferenceX("Relationship Ref")
							[ Option("OnDeleteFKConstraint") " ON DELETE " DecodeProperty("Relationship Parent Delete Rule","10006","SET NULL","10005","CASCADE") ]
					PopX("")
					>]
					
			
			[
                Option("ConstraintState") 
                <PushObject("Oracle Constraint State")
                Execute("Constraint State") 
                [ Option("FKConstraintInAlter") " EXCEPTIONS INTO " PushReferenceX("Exception Table Ref")  [Owner("")"."]PhysicalName("") PopX("")]
                PopX("")>
            ]
	]
#}SPItemEnd

SPItemBegin =  Supplemental Log Columns
10000: {#[              
			ForEachChildObject("Oracle Supplemental Log Column")
			{
				Separator(",")
				PushReferenceX("Column Ref") [ PhysicalName("") ] PopX("") [" " DecodeProperty("Has No Log","<TRUE>", "NO LOG")]
			}
		]
#}SPItemEnd
			
SPItemBegin =  Supplemental Log Group
10000: {#[              
		ForEachChildObject("Oracle Supplemental Log Group")
		{
			Separator(",\r\n")
			"SUPPLEMENTAL LOG GROUP " Name("")
			[
			"("
				IsNotNull(Execute("Supplemental Log Columns"),"<TRUE>")
			")"
			]
			[" " DecodeProperty("Log Always","<TRUE>","ALWAYS")]
		}
]
#}SPItemEnd
			
SPItemBegin =  Supplemental Log
10000: {#[      Execute("Supplemental Log Group")
			[[IsNotNull(Execute("Supplemental Log Group")) "," "\r\n"]  "SUPPLEMENTAL LOG DATA " "(" IsNotNull(Execute("Supplemental Key Log"),"<TRUE>") ") " "COLUMNS"]
		]
#}SPItemEnd

SPItemBegin = Individual LOB Column Properties
10000: {#[
	PushObject("Oracle LOB Storage") [IsNotNull(Execute("Lob Storage Properties"),"<True>")] PopX("")
	]
#}SPItemEnd

SPItemBegin =  LOB Properties
10000: {#[
		"\r\n\t" "LOB " "(" PhysicalName("") ")"
		IsNotNull(Execute("Individual LOB Column Properties"),"<True>")
		]
#}SPItemEnd
		
SPItemBegin =  LOB Column Properties
10000: {#
	[Option("ColumnPhysicalOrder")
		ForEachVectorReference("Physical Order List")
		{
			Execute("LOB Properties")
		}
	]
				
	[Option("!ColumnPhysicalOrder")
		ForEachVectorReference("Column Order List")
		{
			Execute("LOB Properties")				
		}
	]
#}SPItemEnd

SPItemBegin =  Table Properties
10000:  {#[
		[Option("TablePhysicalStorage") "\r\n\t" "ON COMMIT " DecodeProperty("Oracle Commit Type","0","DELETE","1","PRESERVE") " ROWS"]

		[Option("TablePhysicalStorage") Execute("Physical Properties")]
		
		[
		        /*LOB Storage option is illegal for Oracle Temporary Tables*/       
			    IsNull(Execute("Is Temporary Table"))
				Option("ColumnLOBStorage") Execute("LOB Column Properties")
	    ]

		[Option("TablePartitions") Execute("Table Partition")]

		[Option("TablePhysicalStorage")
			["\r\n\t" DecodeProperty("Oracle Cache","<TRUE>","CACHE","<FALSE>","NOCACHE")]
			["\r\n\t" DecodeProperty("Use Parallel", "904", "PARALLEL", "905","NOPARALLEL") [" " PropertyValue("Oracle Parallel")  ]]
			["\r\n\t" DecodeProperty("Oracle Row Dependencies","<TRUE>","ROWDEPENDENCIES","<FALSE>","NOROWDEPENDENCIES")]
			["\r\n\t" DecodeProperty("Oracle Enable Row Movement","<TRUE>","ENABLE","<FALSE>","DISABLE") "  ROW MOVEMENT"]
			["\r\n\t" DecodeProperty("Is Monitoring","<TRUE>","MONITORING","<FALSE>","NOMONITORING") ]
		]
	]
#}SPItemEnd

SPItemBegin =  IsObjectEntity
10000: {#[
			PushOwnerX("") [ IsObjectType("Entity") "Entity" ]PopX("")
]
#}SPItemEnd

SPItemBegin =  IsObjectView
10000: {#[
			PushOwnerX("") [ IsObjectType("View") "View" ]PopX("")
]
#}SPItemEnd


SPItemBegin =  IsObjectMaterializedView
10000: {#[
			PushOwnerX("") [ IsObjectType("Cached View") "Materialized View" ]PopX("")
]
#}SPItemEnd

SPItemBegin =  Key Group Is Constraint
10000: {#[
			DecodeProperty("Generate As Constraint","<TRUE>","<Empty>")
			[ CompareStrings(PropertyValue("Key Group Type"),"PK","2")	"PK" Option("PKConstraintInCreate") ]
			[ CompareStrings(PropertyValue("Key Group Type"),"PK","2")	"PK" Option("PKConstraintInAlter") ]
			[ CompareStrings(PropertyValue("Key Group Type"),"AK","2")	"PK" Option("AKConstraintInCreate") ]
			[ CompareStrings(PropertyValue("Key Group Type"),"AK","2")	"PK" Option("AKConstraintInAlter") ]
]
#}SPItemEnd



SPItemBegin =  Index Drop Option
10000: {#[
			[	IsNotNull(Execute("IsObjectEntity"))
	 			[ CompareStrings(PropertyValue("Key Group Type"),"PK","2")	"PK" Option("DropPKIndex")   
	 				[IsAlterScript("") IsNull(Execute("Key Group Is Constraint"))]
	 			]
				[ CompareStrings(PropertyValue("Key Group Type"),"AK","2")	"AK" Option("DropAKIndex")	
					[IsAlterScript("") IsNull(Execute("Key Group Is Constraint"))]
				]
				[ IsNotNull(CompareStrings(PropertyValue("Key Group Type"),"IF","2"),"<FALSE>")			Option("DropFKIndex")
					PushReference("Relationship Ref") [  Generate("")  "IF" ] PopX("")
				]
				[ CompareStrings(PropertyValue("Key Group Type"),"IE","2")  "IE" Option("DropIEIndex")   ]
							
			]
			[
				IsNotNull(Execute("IsObjectMaterializedView"))
				[ CompareStrings(PropertyValue("Key Group Type"),"AK","2")	"AK" 	Option("DropCachedViewAlternateKeyIndex")	]
				[ CompareStrings(PropertyValue("Key Group Type"),"IE","2")  "IE"  Option("DropCachedViewInversionEntryIndex")   ]
			]
		]
        #}SPItemEnd

SPItemBegin =  Index Storage Option
10000: {#[ 
			[	
				IsNotNull(Execute("IsObjectEntity"))
				[ "Physical Storage" 	Option("IndexPhysicalStorage")   ]
			]
			
			[	
				IsNotNull(Execute("IsObjectMaterializedView"))
				[ "Physical Storage" 	Option("CreateCachedViewIndexPhysicalStorage")   ]
			]
		]
        #}SPItemEnd

SPItemBegin =  Index Partition Option
10000: {#[ 
			[	
				IsNotNull(Execute("IsObjectEntity"))
				[ "Physical Partition" 	Option("IndexPartitions")   ]
			]
			
			[	
				IsNotNull(Execute("IsObjectMaterializedView"))
				[ "Physical Partition" 	Option("CreateCachedViewIndexPartitions")   ]
			]
		]
        #}SPItemEnd
	
SPItemBegin =  Index Create Option
10000: {#[ 
			[	
				IsNotNull(Execute("IsObjectEntity"))
				[ CompareStrings(PropertyValue("Key Group Type"),"PK","2")	"PK"	Option("CreatePKIndex")   ]
				[ CompareStrings(PropertyValue("Key Group Type"),"AK","2")	"AK"	Option("CreateAKIndex")	  ]
				[ IsNotNull(CompareStrings(PropertyValue("Key Group Type"),"IF","2"),"<FALSE>")			Option("CreateFKIndex")
					PushReference("Relationship Ref") [  Generate("")  "IF" ] PopX("")
			    ]
				[ CompareStrings(PropertyValue("Key Group Type"),"IE","2")  "IE"    Option("CreateIEIndex")   ]
			]
			
			[	
				IsNotNull(Execute("IsObjectMaterializedView"))
				[ CompareStrings(PropertyValue("Key Group Type"),"AK","2")	"AK"	Option("CreateCachedViewAlternateKeyIndex")	  ]
				[ CompareStrings(PropertyValue("Key Group Type"),"IE","2")  "IE"    Option("CreateCachedViewInversionEntryIndex")   ]
			]
		]
#}SPItemEnd



SPItemBegin =  Referencing Clause
10000: {#       [ " OLD AS " PropertyValue("Trigger Old")]
			[ " NEW AS " PropertyValue("Trigger New")]
        #}SPItemEnd

SPItemBegin =  Refresh Properties
10000: {#       [
				[
					DecodeProperty("Refresh State","911","<Empty>")
					"\r\n\t" "NEVER REFRESH "
				]
				[
					DecodeProperty("Refresh State","910","<Empty>")
					"\r\n\t" "REFRESH " IsNotNull(Execute("Materialized View Refresh"),"<TRUE>")
				]

				["\r\n\t" DecodeProperty("Updateable","<TRUE>","FOR UPDATE")]
				["\r\n\t" DecodeProperty("Query Rewrite State","921","DISABLE","920","ENABLE") " QUERY REWRITE"]
			]
        #}SPItemEnd

SPItemBegin =  Library Agent Properties
1: {#   [
PushReferenceX("Database Link Ref") [Name("")] PopX("")
]
#}SPItemEnd

SPItemBegin =  Agent Properties
1: {#   [
PushReferenceX("Oracle Database Link Ref") [Name("")] PopX("")
]
#}SPItemEnd

SPItemBegin =  Generate Model
1: {#   [
			Option("ModelPreScript")	
			ForEachChildObject("Script Template","Object Order")
			{
				[	
					Generate("")		
					Bucket("1") 
					DecodeProperty("Gen As Pre Script","<True>","<Empty>")
					DecodeProperty("Type","1","<FALSE>","<TRUE>")
					ExpandErwinMacro("Template Code")
					"\r\n\r\n\r\n"
					EndOfStatement("")
				]
			}
		]
		
		[	IsForwardEngineering("")
			ForEachVectorReference("Source Objects Ref")
			{
				Generate("")
				[   
					IsObjectType("Stored Procedure")
					DecodeProperty("Type","1","<FALSE>","<TRUE>")
					[Option("ModelDropProcedureSynonym") Bucket("100") Execute("Drop Synonyms For This Object")]
					[Option("ModelDropProcedure") Execute("Drop Stored Procedure")]
					[Option("ModelCreateProcedure") Execute("Create Stored Procedure")]
					[Option("ModelCreateProcedureSynonym") Bucket("100") Execute("Create Synonyms For This Object")]
				]
				[
				
					IsObjectType("Function")
					DecodeProperty("Type","1","<FALSE>","<TRUE>")
					[Option("DropFunctionSynonym") Bucket("105") Execute("Drop Synonyms For This Object")]
					[Option("ModelDropFunction") Execute("Drop Function")]
					[Option("ModelCreateFunction") Execute("Create Function")]
					[Option("CreateFunctionSynonym") Bucket("105") Execute("Create Synonyms For This Object")]
				]
				
				[
					IsObjectType("Oracle Package")
					Execute("Generate Oracle Package")
				]
			}
		]
		
	

		[
			Option("ModelPostScript")
			ForEachChildObject("Script Template","Object Order")
			{
				[	
					Generate("")
					Bucket("120") 
					DecodeProperty("Gen As Pre Script","<TRUE>","<FALSE>","<TRUE>")
					DecodeProperty("Type","1","<FALSE>","<TRUE>")
					ExpandErwinMacro("Template Code")
					"\r\n\r\n\r\n"
					EndOfStatement("")
				]
			}
		]
#}SPItemEnd


SPItemBegin =  Create Oracle Disk Group
1: {#[Once("Create Oracle Disk Group")
	 FESetString("Create Oracle Disk Group")
		Bucket("5") Option("CreateDiskgroup") 
		"CREATE DISKGROUP "   Name("")
		 ["\r\n\t" DecodeProperty("Redundancy Type","0","HIGH") " REDUNDANCY"]
		 ["\r\n\t" DecodeProperty("Redundancy Type","1","NORMAL") " REDUNDANCY"]
		 ["\r\n\t" DecodeProperty("Redundancy Type","2","EXTERNAL") " REDUNDANCY"]
		 ForEachChildObject("Oracle Fail Group")
		 {
			"\r\n\t" ["FAILGROUP " IsNull(Execute("Unnamed")) Name("") " "] "DISK "
			ForEachChildObject("Oracle Qualified Disk")
			{
				Separator(",")
				"\r\n\t\t" "'" PropertyValue("Search String") "'" [IsNull(Execute("Unnamed")) " NAME " PropertyValue("Name")] [" SIZE " PropertyValue("Oracle Size")] [" " DecodeProperty("Force","<TRUE>","FORCE","<FALSE>","NOFORCE")]
			}
		 }
		Execute("EndOfStatement") 
	]
        #}SPItemEnd

SPItemBegin =  Drop Oracle Disk Group
1: {#   [Once("Drop Oracle Disk Group")
		 FESetString("Drop Oracle Disk Group")
			
			Bucket("5") Option("DropDiskgroup") "DROP DISKGROUP " PrevPhysicalName("") " INCLUDING CONTENTS"
		Execute("EndOfStatement") ]
                #}SPItemEnd

SPItemBegin =  Generate Oracle Disk Group
1: {#   [Bucket("5")  
				Execute("Drop Oracle Disk Group") ]
		[Bucket("5")  
				Execute("Create Oracle Disk Group") ]
                #}SPItemEnd

SPItemBegin =  Create Oracle Database
1: {#   [Generate("")
		Once("Create Oracle Database")
		FESetString("Create Oracle Database")
		Bucket("10") Option("CreateDatabase")  
		 "CREATE DATABASE "   [Name("")]
		 ["\r\n\t" DecodeProperty("Oracle Control File Reuse","<TRUE>","CONTROLFILE REUSE") ]
		 ["\r\n\t" "MAXDATAFILES " PropertyValue("Oracle MaxDataFiles")]
		 ["\r\n\t" "MAXINSTANCES " PropertyValue("Oracle MaxInstances")]
		 ["\r\n\t" "CHARACTER SET " PropertyValue("Oracle CharacterSet")]
		 ["\r\n\t" "NATIONAL CHARACTER SET " PropertyValue("National Character Set")]
		 ["\r\n\t" "SET DEFAULT " DecodeProperty("Storage File Type","0", "BIGFILE","1","SMALLFILE") " TABLESPACE"]
		 ["\r\n\t" "LOGFILE "
		 
			ForEachChildObject("Oracle Log File","Order")
			{
				Separator(",")
				["\r\n\t\t" "GROUP " PropertyValue("Group Id") ] 
				["\r\n\t\t" "(" ExpandVector("File Names","'"," ,") ")"]
				["\r\n\t\t" "SIZE " PropertyValue("Oracle File Size") ] 
				["\r\n\t\t" DecodeProperty("Oracle Reuse File","<TRUE>","REUSE") ] 
			}
		]
		["\r\n\t" "MAXLOGFILES " PropertyValue("Oracle MaxLogFiles")]
		["\r\n\t" "MAXLOGMEMBERS " PropertyValue("Oracle MaxLogMembers")]
		["\r\n\t" "MAXLOGHISTORY " PropertyValue("Oracle MaxLogHistory")]
		["\r\n\t" DecodeProperty("Oracle ArchiveLog","<TRUE>", "ARCHIVELOG","<FALSE>","NOARCHIVELOG") ]
		["\r\n\t" DecodeProperty("Force Logging","<TRUE>", "FORCE LOGGING")]
		["\r\n\t" "EXTENT MANAGEMENT " DecodeProperty("Extent Management Type","1","LOCAL") ]
		[ PushReferenceX("System Oracle Tablespace Ref")
   				  ["\r\n\t" "DATAFILE " IsNotNull(Execute("Physical File"),"<TRUE>") ]
		          ["\r\n\t" "EXTENT MANAGEMENT " DecodeProperty("Extent Management Type","923","LOCAL") ]
				  PopX("")		
		]
		[PushReferenceX("Auxiliary Oracle Tablespace Ref")
				  ["\r\n\t" "SYSAUX DATAFILE " IsNotNull(Execute("Physical File"),"<TRUE>")]
				  PopX("")		
		]
		["\r\n\t" PushReferenceX("Default Tablespace Ref")
				  "DEFAULT TABLESPACE " Name("") 
				  ["\r\n\t" "DATAFILE " IsNotNull(Execute("Physical File"),"<TRUE>")]
				  [ "\r\n\t" "EXTENT MANAGEMENT " DecodeProperty("Extent Management Type", "922", "DICTIONARY","923","LOCAL")
							["  " DecodeProperty("Local Extent Management Type", "920", "AUTOALLOCATE","921","UNIFORM") [" " "SIZE " PropertyValue("Extent Size") ]]]
				  PopX("")		
		]
		["\r\n\t" PushReferenceX("Default Temp Tablespace Ref")
				  [DecodeProperty("Storage File Type","0", "BIGFILE","1","SMALLFILE") " "] "DEFAULT TEMPORARY TABLESPACE " Name("") 
				  ["\r\n\t" "TEMPFILE " IsNotNull(Execute("Physical File"),"<TRUE>")]
				  [ "\r\n\t" "EXTENT MANAGEMENT " DecodeProperty("Extent Management Type", "920", "DICTIONARY","923","LOCAL")
							["  " DecodeProperty("Local Extent Management Type", "920", "AUTOALLOCATE","921","UNIFORM") [" " "SIZE " PropertyValue("Extent Size") ]]]
				  PopX("")		
		]
		["\r\n\t" PushReferenceX("Undo Tablespace Ref")
				  [DecodeProperty("Storage File Type","0", "BIGFILE","1","SMALLFILE") " "] "UNDO TABLESPACE " Name("") 
				  ["\r\n\t" "DATAFILE " IsNotNull(Execute("Physical File"),"<TRUE>")]
				  PopX("")		
		]
		["\r\n\t" "SET TIME_ZONE='" PropertyValue("Time Zone") "'"]
		Execute("EndOfStatement")
	]
	
	[	Bucket("110")
			Option("CreateDatabaseTrigger") 
			ForEachChildObject("Trigger")
			{
				[
					Generate("")
					Execute("Create Trigger")
				]
			}
	]
        #}SPItemEnd

SPItemBegin =  Drop Oracle Database
1: {#   [
			[
				Bucket("110")
				Option("DropDatabaseTrigger") 
				ForEachChildObject("Trigger")
				{
					[
						Generate("")
						Execute("Drop Trigger")
					]
				}
			]
			
			[Once("Drop Oracle Database")
			FESetString("Drop Oracle Database")
		 
				Bucket("10") Option("DropDatabase") 
				"DROP DATABASE"
				Execute("EndOfStatement")
			]
		]
#}SPItemEnd

SPItemBegin =  Generate Oracle Database
1: {#           
		[			
			Execute("Drop Oracle Database") 
		]
	
		[	
			Execute("Create Oracle Database") 
		]
#}SPItemEnd

SPItemBegin =  Create Oracle Directory
1: {#   [       
			Once("Create Oracle Directory")
			FESetString("Create Oracle Directory")
			Bucket("15") Option("CreateDirectory") 
			"CREATE " [ DecodeProperty("Use Create Or Replace","<TRUE>","<Empty>") "OR REPLACE "] " DIRECTORY "  Name("") 
			"\r\n\t" "AS " "'" PropertyValue("Path") "'"
			Execute("EndOfStatement") 
		]
                #}SPItemEnd

SPItemBegin =  Drop Oracle Directory
1: {#   [Once("Drop Oracle Directory")
			FESetString("Drop Oracle Directory")
			Bucket("15") Option("DropDirectory") 
			"DROP DIRECTORY "   PrevPhysicalName("")  
				Execute("EndOfStatement") 
		]
                #}SPItemEnd

SPItemBegin =  Generate Oracle Directory
1: {#   [
			Execute("Drop Oracle Directory") 
		]

		[
			Execute("Create Oracle Directory") 
		]
        #}SPItemEnd

SPItemBegin =  Create Oracle Library
1: {#   [       
			Once("Create Oracle Library")
			FESetString("Create Oracle Library")
			Bucket("25") Option("CreateLibrary") 
			"CREATE " [ DecodeProperty("Use Create Or Replace","<TRUE>","<Empty>") "OR REPLACE "] "LIBRARY "  [Owner("")"."]Name("") 
			"\r\n\t" "AS " "'" PropertyValue("File Name") "'"
			["\r\n\t" "AGENT " "'" IsNotNull(Execute("Library Agent Properties"),"<TRUE>") "'"]
			Execute("EndOfStatement") 
		]
                #}SPItemEnd

SPItemBegin =  Drop Oracle Library
1: {#   [Once("Drop Oracle Library")
			FESetString("Drop Oracle Library")
			Bucket("25") Option("DropLibrary")  "DROP LIBRARY "   [PrevOwner("")"."]PrevPhysicalName("")  
				Execute("EndOfStatement") ]
#}SPItemEnd

SPItemBegin =  Generate Oracle Library
1: {#   [
				Execute("Drop Oracle Library") 
		]
		[
				Execute("Create Oracle Library") 
		]
#}SPItemEnd


SPItemBegin =  Create Oracle Database Link
1: {#   [Generate("")
			Once("Create Oracle Database Link")
			FESetString("Create Oracle Database Link")
			Bucket("20") Option("CreateDatabaseLink") 
			"CREATE " [DecodeProperty("Shared","<TRUE>","SHARED") " "] [DecodeProperty("Oracle Public","<TRUE>","PUBLIC","<FALSE>","<Empty>") " "]  " DATABASE LINK " Name("")
			["\r\n\t" DecodeProperty("Connection Type","0","<Empty>") "CONNECT TO CURRENT_USER" [" AUTHENTICATED BY " QuoteProperty("Authenticated User")  " IDENTIFIED BY GeneratePassword "]]
			["\r\n\t" DecodeProperty("Connection Type","1","<Empty>") ["CONNECT TO " QuoteProperty("User")  " IDENTIFIED BY GeneratePassword "] [ "AUTHENTICATED BY " QuoteProperty("Authenticated User") " IDENTIFIED BY GeneratePassword " ]]
			["\r\n\t" DecodeProperty("Connection Type","2","<Empty>") "AUTHENTICATED BY " QuoteProperty("Authenticated User") " IDENTIFIED BY GeneratePassword " ]
			["\r\n\t" "USING " "'" PropertyValue("Connect String") "'"]
			Execute("EndOfStatement")
		] 
#}SPItemEnd

SPItemBegin =  Drop Oracle Database Link
1: {#   [Once("Drop Oracle Database Link")
		FESetString("Drop Oracle Database Link")
			
		Bucket("20") Option("DropDatabaseLink") 
		"DROP " [DecodeProperty("Oracle Public","<TRUE>","PUBLIC","<FALSE>","<Empty>") " "] "DATABASE LINK " PrevPhysicalName("") 
		Execute("EndOfStatement") 
		]
#}SPItemEnd

SPItemBegin =  Generate Oracle Database Link
1: {#   [               
			Execute("Drop Oracle Database Link") 
		]
		
		[		
			Execute("Create Oracle Database Link") 
		]
                #}SPItemEnd

SPItemBegin =  Create Synonym
1: {# [
		
	
		[
			[
				Once("Create Synonym")
				FESetString("Create Synonym")
				"CREATE " [ DBMSVersion("9","10") DecodeProperty("Use Create Or Replace","<TRUE>","<Empty>") "OR REPLACE "] [DecodeProperty("Oracle SynPublic","<TRUE>","PUBLIC","<FALSE>","<Empty>") " "] "SYNONYM " [Owner("")"."]Name("")
				"\r\n\t"  " FOR " 
				[PushOwnerX("")  [IsNull(Execute("IsModel")) [Owner("")"."] PhysicalName("")] PopX("")]
				[[Option("SpecifyOwner") QuoteProperty("Object Owner")"."]QuoteProperty("Object Name") ["@" IsNotNull(Execute("Agent Properties"),"<True>") ]]
				Execute("EndOfStatement") 
			]
		]
		
		[Execute("Create Synonyms For This Object")]
		
	]
        #}SPItemEnd

SPItemBegin =  Drop Synonym
1: {#  [
		ForEachChildObject("Synonym")
		{
			Execute("Drop Synonym")
		
		}
	 ]
	 [
		
		[
			Once("Drop Synonym")
			FESetString("Drop Synonym")
		
			"DROP " [DecodeProperty("Oracle SynPublic","<TRUE>","PUBLIC","<FALSE>","<Empty>") " "] " SYNONYM " [PrevOwner("")"."]PrevPhysicalName("") [DBMSVersion("10")" FORCE"]
				Execute("EndOfStatement") 
		]
	]	
        #}SPItemEnd

		
SPItemBegin =  Generate Synonym
1: {#   [Bucket("35") Option("ModelDropSynonym") 
				Execute("Drop Synonym") 
		]
		[Bucket("35")  Option("ModelCreateSynonym") 
				Execute("Create Synonym") ]
        #}SPItemEnd


SPItemBegin =  Create Sequence
1: {#   [Once("Create Sequence")
		 FESetString("Create Sequence")
			Bucket("35") Option("CreateSequence") 
			"CREATE SEQUENCE " [Owner("")"."]Name("")
			["\r\n\t" "INCREMENT BY " PropertyValue("Increment") ]
			["\r\n\t" "START WITH " PropertyValue("Initial")]
			["\r\n\t" DecodeProperty("Max On", "<FALSE>", "NOMAXVALUE") ]
			["\r\n\t" DecodeProperty("Max On", "<TRUE>", "MAXVALUE " ) PropertyValue("Max Val") ]
			["\r\n\t" DecodeProperty("Min On", "<FALSE>", "NOMINVALUE") ]
			["\r\n\t" DecodeProperty("Min On", "<TRUE>", "MINVALUE ") PropertyValue("Min Val") ]
			["\r\n\t" DecodeProperty("Cycle On", "<TRUE>", "CYCLE", "<FALSE>", "NOCYCLE") ]
			["\r\n\t" DecodeProperty("Cache On", "<FALSE>", "NOCACHE") ]
			["\r\n\t" DecodeProperty("Cache On", "<TRUE>", "CACHE ") PropertyValue("Cache Val") ]
			["\r\n\t" DecodeProperty("Order On", "<TRUE>", "ORDER", "<FALSE>", "NOORDER") ] 
			Execute("EndOfStatement")
		]
		
		[
			Option("SequenceCreateSynonym") Bucket("35")
			Execute("Create Synonyms For This Object")
		]
          #}SPItemEnd


SPItemBegin =  Drop Sequence
1: {#[
			Option("SequenceDropSynonym") 
			Bucket("35") Execute("Drop Synonyms For This Object")
	]
	
	[
			Once("Drop Sequence")
			FESetString("Drop Sequence")
			
			Bucket("35") Option("DropSequence") 
			"DROP SEQUENCE IF EXISTS " [PrevOwner("")"."]PrevPhysicalName("") 
				Execute("EndOfStatement") 
	]
#}SPItemEnd

SPItemBegin =  Generate Sequence
1: {#[  
		Execute("Drop Sequence")
	]
	[
		Execute("Create Sequence")
	]
#}SPItemEnd

SPItemBegin =  Create View
        1: {# [Generate("")
			Once("Create View")
		[
			FESetString("Create View")
			Bucket("90") Option("CreateView") 
			[
				IsNotNull(PropertyValue("View SQL"), "<TRUE>")
				Execute("EndOfStatement")
			]

			[
				IsNull([PropertyValue("View SQL")])
				"CREATE " [ DecodeProperty("Use Create Or Replace","<TRUE>","<Empty>") "OR REPLACE "]  [DecodeProperty("Force Create","<TRUE>"," FORCE","<FALSE>", " NOFORCE") ]" VIEW " [Owner("")"."]PhysicalName("")
				[IsNotNull([Execute("View Column Has Alias")],"<FALSE>")
					" ( "
					ForEachVectorReference("Physical Order List")
					{
						Generate("")
						Separator(",")
						Name("")
					}
					" ) "
				]
				"\r\n\t"
				" AS "
				IsNotNull(Execute("Select Statement"),"<TRUE>")
				[
					["\r\n\t\t" DecodeProperty("View With Check","2","WITH READ ONLY")]
					["\r\n\t\t" DecodeProperty("View With Check","1","WITH CHECK OPTION")]
                    [" CONSTRAINT " PropertyValue("Oracle Constraint")]
				]
				Execute("EndOfStatement")
			]
		]
	
		[
			Bucket("90") Generate("") Option("Comments") "COMMENT ON TABLE " [Owner("")"."]Name("") " IS '"   SubstituteString(TranslatedValue("Definition"),"'","''") "'" 
				Execute("EndOfStatement") 
		]

		[
			Generate("") Option("Comments") 
			[
				ForEachVectorReference("Physical Order List")
				{
					[Bucket("90") "COMMENT ON COLUMN " PushOwnerX("") [Owner("")"."]Name("") PopX("") "." Name("") " IS '"   SubstituteString(TranslatedValue("Definition"),"'","''") "'" Execute("EndOfStatement") ]
				}
			]
		]
	
		[Generate("")
			Option("ViewCreateSynonym") Bucket("90")
			Execute("Create Synonyms For This Object")
		]
		
		[Option("CreateView") Generate("") IsNull([PropertyValue("View SQL")])
			ForEachChildObject("Key Group")
			{
				[	
					[
						Bucket("90") 
						"ALTER VIEW " PushOwnerX("")  [Owner("")"."]PhysicalName("") PopX("")
						"\r\n\t" "ADD " IsNotNull(Execute("PKConstraint"),"<TRUE>")
						[Execute("EndOfStatement")]
					]
				]
			}
		]
		
		[Option("CreateView") Generate("") IsNull([PropertyValue("View SQL")])
			ForEachChildObject("Key Group")
			{
				[	
					[
						Bucket("90") 
						"ALTER VIEW " PushOwnerX("")  [Owner("")"."]PhysicalName("") PopX("")
						"\r\n\t" "ADD " IsNotNull(Execute("AKConstraint"),"<TRUE>")
						[Execute("EndOfStatement")]
					]
				]
			}
		]
		
		
		[Option("CreateView") Generate("") IsNull([PropertyValue("View SQL")])
			ForEachChildObject("Key Group")
			{
				[	
					[
						Bucket("90") 
						"ALTER VIEW " PushOwnerX("")  [Owner("")"."]PhysicalName("") PopX("")
						"\r\n\t" "ADD " IsNotNull(Execute("ViewFKConstraint"),"<TRUE>")
						[Execute("EndOfStatement")]
					]
				]
			}
		]
		
	[
		
		ForEachVectorReference("Stored Procedures")
		{
			[
				Generate("")
				DecodeProperty("Type","1","<Empty>")
				[Option("ViewDropProcedureSynonym") Bucket("100") Execute("Drop Synonyms For This Object")]
				[Option("ViewDropStoredProcedure") Execute("Drop Stored Procedure")]
				[Option("ViewCreateStoredProcedure") Execute("Create Stored Procedure")]
				[Option("ViewCreateProcedureSynonym") Bucket("100") Execute("Create Synonyms For This Object")]
			]
		}
	]
	
		[Generate("")
		
			ForEachVectorReference("Functions Ref")
			{
				[
					Generate("")
					DecodeProperty("Type","1","<Empty>")
					[Option("ViewDropFunctionSynonym") Bucket("100") Execute("Drop Synonyms For This Object")]
					[Option("ViewDropFunction") Execute("Drop Function")]
					[Option("ViewCreateFunction") Execute("Create Function")]
					[Option("ViewCreateFunctionSynonym") Bucket("100") Execute("Create Synonyms For This Object")]
				]
			}
		]

		[Generate("")
			Option("ViewCreateTrigger") 
			ForEachChildObject("Trigger")
			{
				[
					Generate("")
					Execute("Create Trigger")
				]
			}
		]
	
		[
			Generate("") Option("ViewPostScript")
			[
				ForEachVectorReference("Script Templates")
				{
					[  
						Generate("")
						Bucket("90")
						DecodeProperty("Gen As Pre Script","<TRUE>","<FALSE>","<TRUE>")
						ExpandErwinMacro("Template Code")
						"\r\n\r\n\r\n"
						EndOfStatement("")
					]
				}
			]
			[IsAlterScript("") 
				ForEachVectorReference("Parent Relations Ref")
				{
					[
						PushReferenceX("Child Entity Ref")
							[IsObjectType("View")
								IsNull([IsDeleted("") "Not Deleted"])
								Execute("Create View")
							]
						PopX("")
					]
				}
			]
		]
	]
        #}SPItemEnd


SPItemBegin =  Drop View
1: {# [Once("Drop View")
			Generate("") Option("ViewPreScript")
			ForEachVectorReference("Script Templates")
			{
				[
					Generate("")
					DecodeProperty("Gen As Pre Script","<TRUE>","<Empty>")
					Bucket("40") ExpandErwinMacro("Template Code")
					"\r\n\r\n\r\n"
					EndOfStatement("")
				]
			}
		]
		
		[Generate("")
			Option("ViewDropTrigger") 
			ForEachChildObject("Trigger")
			{
				[
					Generate("")
					Execute("Drop Trigger")
				]
			}
		]
	
		[ Generate("") Option("ViewDropSynonym") 
				Bucket("40") Execute("Drop Synonyms For This Object")
		]
		
		[Generate("")
			FESetString("Drop View")
			
			Option("DropView")  
			[IsAlterScript("") 
					ForEachVectorReference("Parent Relations Ref")
					{
						[
							PushReferenceX("Child Entity Ref")
								[IsObjectType("View")
									Execute("Drop View")
								]
							PopX("")
						]
					}
			]
			[Bucket("40") 
			"DROP VIEW " [PrevOwner("")"."]PrevPhysicalName("") " CASCADE CONSTRAINTS" 
				Execute("EndOfStatement") 
			]
		]
        #}SPItemEnd

SPItemBegin =  Generate View
1: {#   [
				Execute("Drop View") 
		]
		
		[
			Execute("Create View") 
		]
                #}SPItemEnd


SPItemBegin =  Create Cached View
1: {#[  Once("Create Cached View")
		Generate("")
		FESetString("Create Cached View")
		Bucket("90") Option("CreateCachedView")
		[
			IsNotNull(PropertyValue("View SQL"), "<TRUE>")
			Execute("EndOfStatement") 
		]

		[
			IsNull([PropertyValue("View SQL")])
			"CREATE MATERIALIZED VIEW " [Owner("")"."]Name("")
			[
				DecodeProperty("Oracle Prebuilt Table","<TRUE>","<Empty>")
				"\r\n\t\t" "ON PREBUILT TABLE" ["  " DecodeProperty("Oracle Reduced Precision", "<TRUE>", "WITH","<FALSE>","WITHOUT") " REDUCED PRECISION" ]
			]
			[
				DecodeProperty("Oracle Prebuilt Table","<TRUE>","<FALSE>","<TRUE>")
				[Option("CachedViewPhysicalStorage") Execute("Physical Properties")]
				[Option("CachedViewLOBStorage") Execute("LOB Column Properties")]
				[Option("CachedViewPartitions") Execute("Table Partition")]
				[Option("CachedViewPhysicalStorage")
					["\r\n\t" DecodeProperty("Oracle Cache","<TRUE>","CACHE","<FALSE>","NOCACHE")]
					["\r\n\t" DecodeProperty("Use Parallel", "904", "PARALLEL", "905","NOPARALLEL") [" " PropertyValue("Oracle Parallel") ]]
					["\r\n\t" "BUILD "DecodeProperty("Build Clause","906","IMMEDIATE","907","DEFERRED")]
				]
			]

			[   Option("CachedViewUsingIndexStorage")
				DecodeProperty("Use Index","908","<Empty>")
				"\r\n\t" "USING INDEX "
				[
					PushReferenceX("Index Ref")
						[PushObject("Oracle Attribute Storage")
							["\r\n\t" "TABLESPACE " PushReferenceX("Oracle Tablespace Ref") Name("") PopX("")]
							[PushObject("Oracle Physical Storage") 
                                [ "\r\n\t" "INITRANS " PropertyValue("Oracle IniTrans")]
                                [ "\r\n\t" "PCTFREE " PropertyValue("Oracle PctFree")]
                                ["\r\n\t" "STORAGE ( " IsNotNull(Execute("Storage"),"<TRUE>") "\r\n\t )"]
                             PopX("")]
						PopX("")]
					PopX("")
				]

			]

			[	Option("CachedViewUsingIndexStorage")
				DecodeProperty("Use Index","909","<Empty>")
				"\r\n\t" "USING NO INDEX "
			]

			[Option("CachedViewPhysicalStorage") Execute("Refresh Properties")]
			"\r\n\t" " AS "
			IsNotNull(Execute("Select Statement"),"<TRUE>")
			Execute("EndOfStatement") 
		]
	]
	
	[ DBMSVersion("8","9") Once("Cached View Comment") Generate("") Option("Comments") Bucket("90") "COMMENT ON TABLE " [Owner("")"."]Name("") " IS '"   SubstituteString(TranslatedValue("Definition"),"'","''") "'" 
				Execute("EndOfStatement")
	]
	
	[DBMSVersion("10") Once("Cached View Comment") Generate("") Option("Comments") Bucket("90") "COMMENT ON MATERIALIZED VIEW " [Owner("")"."]Name("") " IS '"   SubstituteString(TranslatedValue("Definition"),"'","''") "'" 
				Execute("EndOfStatement")
	]
				
	[	Generate("") Option("Comments") 
		[
			ForEachVectorReference("Physical Order List")
			{
				[Once("Cached View Comment") Bucket("90") "COMMENT ON COLUMN " PushOwnerX("") [Owner("")"."]Name("") PopX("") "." Name("") " IS '"   SubstituteString(TranslatedValue("Definition"),"'","''") "'" Execute("EndOfStatement") ]
			}
		]
	]

	[
		Option("CachedViewCreateSynonym") Bucket("90")
			Execute("Create Synonyms For This Object")
	]

	[
		
		ForEachVectorReference("Stored Procedures")
		{
			[
				Generate("")
				DecodeProperty("Type","1","<Empty>")
				[Option("CachedViewDropProcedureSynonym") Bucket("100") Execute("Drop Synonyms For This Object")]
				[Option("CachedViewDropProcedure") Execute("Drop Stored Procedure")]
				[Option("CachedViewCreateProcedure") Execute("Create Stored Procedure")]
				[Option("CachedViewCreateProcedureSynonym") Bucket("100") Execute("Create Synonyms For This Object")]
			]
		}
	]
	
	[
		
		ForEachVectorReference("Functions Ref")
		{
			[
				Generate("")
				DecodeProperty("Type","1","<Empty>")
				[Option("CachedViewDropFunctionSynonym") Bucket("100") Execute("Drop Synonyms For This Object")]
				[Option("CachedViewDropFunction") Execute("Drop Function")]
				[Option("CachedViewCreateFunction") Execute("Create Function")]
				[Option("CachedViewCreateFunctionSynonym") Bucket("100") Execute("Create Synonyms For This Object")]
			]
		}
	]
	
	
	[
		Option("CachedViewCreateTrigger") 
		ForEachChildObject("Trigger")
		{
			[
				Generate("")
				Execute("Create Trigger")
			]
		}
	]

		
	[
		Generate("") Option("CachedViewPostScript")
		ForEachVectorReference("Script Templates")
		{
			[  
				Generate("")
				Bucket("90")
				DecodeProperty("Gen As Pre Script","<TRUE>","<FALSE>","<TRUE>")
				ExpandErwinMacro("Template Code")
				"\r\n\r\n\r\n"
				EndOfStatement("")
			]
		}
	]

	[		
		ForEachChildObject("Key Group")
		{
			[
				Execute("Create Key Group")
			]
		}
	]
#}SPItemEnd

SPItemBegin =  Drop Cached View
1: {# 
[Generate("")
 Once("Drop Cached View")
 FESetString("Drop Cached View")
	[ Option("CachedViewPreScript")
			ForEachVectorReference("Script Templates")
			{
				[
					Generate("")
					DecodeProperty("Gen As Pre Script","<TRUE>","<Empty>")
					Bucket("90") ExpandErwinMacro("Template Code")
					"\r\n\r\n\r\n"
					EndOfStatement("")
				]
			}
		]

		[
			Option("CachedViewDropTrigger") 
			ForEachChildObject("Trigger")
			{
				[
					Generate("")
					Execute("Drop Trigger")
				]
			}
		]
		
		[Option("CachedViewDropSynonym") 
				Bucket("40") Execute("Drop Synonyms For This Object")]
				

		[	
			Bucket("40") Option("DropCachedView")  "DROP MATERIALIZED VIEW " [PrevOwner("")"."]PrevPhysicalName("") 
				Execute("EndOfStatement") 
		]
]				
#}SPItemEnd

SPItemBegin =  Generate Cached View
1: {#   [  
				Execute("Drop Cached View") ]
				
		[
				Execute("Create Cached View") ]
#}SPItemEnd

SPItemBegin = Is Exception Table Ref
10000:
{#[
    PushObject("Oracle Constraint State")
	[
		PushReferenceX("Exception Table Ref") ["Exception Table"] PopX("")
	]	
   PopX("")    
  ]
#}
SPItemEnd

SPItemBegin =  Create Entity
1:      {# [Generate("") Once("Create Entity")
        [ Option("CreateTable")
		/* Indicate that this entity has been created. */
		FESetString("Create Entity")
		Bucket("90")
    
		"CREATE" [DecodeProperty("Oracle Temporary", "<TRUE>", " GLOBAL TEMPORARY")] " TABLE " [Owner("")"."] PhysicalName("")
		"\r\n("
		IsNotNull(Execute("TableColumns"),"<TRUE>")
		[",\r\n" 
				IsNotNull(Execute("CreatePKConstraint"),"<TRUE>")
		]
		[",\r\n" Option("AKConstraintInCreate")
				IsNotNull(Execute("CreateAKConstraint"),"<TRUE>")
		]
		[",\r\n" Option("FKConstraintInCreate")
				IsNotNull(Execute("CreateFKConstraint"),"<TRUE>")
		]

		[",\r\n" Option("TableCheckConstraint")
				IsNotNull(Execute("CreateTableCheckConstraint"),"<TRUE>")
		]
		[",\r\n" Option("TablePhysicalStorage")
				IsNotNull(Execute("Supplemental Log"),"<TRUE>")
		]
		"\r\n" ")" 

		[Execute("Table Properties")]

		[Execute("EndOfStatement")]
	]
	
	[ Option("Comments") Bucket("90") "COMMENT ON TABLE " [Owner("")"."]PhysicalName("") " IS '"  
				 SubstituteString(TranslatedValue("Comment"),"'","''") "'" Execute("EndOfStatement") ]
				
	[
		Option("Comments") 
		[Option("ColumnPhysicalOrder")
			ForEachVectorReference("Physical Order List")
			{
				[Bucket("90") "COMMENT ON COLUMN " PushOwnerX("") [Owner("")"."]PhysicalName("") PopX("") "." PhysicalName("") " IS '"   SubstituteString(TranslatedValue("Comment"),"'","''") "'" Execute("EndOfStatement")]
			}
		]
				    
		[Option("!ColumnPhysicalOrder")
			ForEachVectorReference("Column Order List")
			{
				[Bucket("90") "COMMENT ON COLUMN " PushOwnerX("") [Owner("")"."]PhysicalName("") PopX("") "." PhysicalName("") " IS '"   SubstituteString(TranslatedValue("Comment"),"'","''") "'" Execute("EndOfStatement")]				    
			}
		]
	]
 
	[ 
		Option("TableCreateSynonym") Bucket("90")
		Execute("Create Synonyms For This Object")
	]

	[Option("ConstraintState")		
	ForEachChildObject("Key Group")
	{
		[	IsNotNull(Execute("Index Is Not Generated"))
			PushObject("Oracle Constraint State")
					[ 
                        /* Generate if not deferred, avoiding 'Index not found' */
                        IsNull([DecodeProperty("Deferrable", "<TRUE>", "DEFERRED", "<FALSE>", "<Empty>")])
                        IsNull([DecodeProperty("Immediate", "<TRUE>", "<Empty>", "<FALSE>", "DEFERRED")])
						IsNotNull(Execute("Using Index Specify Name"))
						DecodeProperty("Use Index","908","<Empty>")
						[   
							PushOwnerX("")
							[
								Bucket("90")
								Execute("Create Key Group Raw")
								IsNotNull(Execute("KeyGroupMembers"),"<FALSE>")
								Execute("EndOfStatement")
							]
							PopX("")
						]
					]
				PopX("")			  
			]
		}
	]
	
	[ /* Generate PK constraint and its corresponding Index*/
		ForEachChildObject("Key Group")
		{
			IsNotNull(CompareStrings(PropertyValue("Key Group Type"),"PK","2"),"<FALSE>")
			[Bucket("90")
				Execute("Create Key Group")
			]
			[	
				IsNotNull(Execute("Constraint In Alter Statement"),"<FALSE>")
				[Option("PKConstraintInAlter")
					Bucket("90") 
					"ALTER TABLE " PushOwnerX("")  [Owner("")"."]PhysicalName("") PopX("")
					"\r\n\t" "ADD " IsNotNull(Execute("PKConstraint"),"<TRUE>")
                    [ 
                        Option("ConstraintState")
                        PushObject("Oracle Constraint State") 
                        [
                            IsNotNull(Execute("Using Index Specify Name"))
                            DecodeProperty("Use Index","908","<Empty>")
                            [   
                                /* Generate index properties if deferred */
                                [ IsNull([DecodeProperty("Deferrable", "<TRUE>", "<Empty>", "<FALSE>", "NOT DEFERRED")])
                                    PushOwnerX("")
                                    [
                                        Execute("Create Key Group Raw Body")
                                    ]
                                    PopX("") ]
                                [ IsNull([DecodeProperty("Immediate", "<TRUE>", "IMMEDIATE", "<FALSE>", "<Empty>")])
                                    PushOwnerX("")
                                    [
                                    Execute("Create Key Group Raw Body")
                                    ]
                                    PopX("") ]
                            ]
                        ] 
                        PopX("")
                    ]
					[Execute("EndOfStatement")]
				]
			]
		}
	]

	[/* Generate Unique constraint and its corresponding Index*/
	 /* process indexes that are marked as constraints*/
		ForEachChildObject("Key Group","Key Group Type")
		{
			IsNotNull(CompareStrings(PropertyValue("Key Group Type"),"AK","2"),"<FALSE>")
			DecodeProperty("Generate As Constraint","<TRUE>","<Empty>")
			[Bucket("90")
				Execute("Create Key Group")
			]
			[  Option("AKConstraintInAlter") Bucket("90")
				"ALTER TABLE " PushOwnerX("")  [Owner("")"."]PhysicalName("") PopX("")
				"\r\n\t" "ADD " IsNotNull(Execute("AKConstraint"),"<TRUE>")
                [ 
                    Option("ConstraintState")
                    PushObject("Oracle Constraint State") 
                    [
                        IsNotNull(Execute("Using Index Specify Name"))
                        DecodeProperty("Use Index","908","<Empty>")
                        [   
                            [ IsNull([DecodeProperty("Deferrable", "<TRUE>", "<Empty>", "<FALSE>", "NOT DEFERRED")])
                                PushOwnerX("")
                                [
                                    Execute("Create Key Group Raw Body")
                                ]
                                PopX("") ]
                            [ IsNull([DecodeProperty("Immediate", "<TRUE>", "IMMEDIATE", "<FALSE>", "<Empty>")])
                                PushOwnerX("")
                                [
                                    Execute("Create Key Group Raw Body")
                                ]
                                PopX("") ]
                        ]
                    ] 
                    PopX("")
                ]
				Execute("EndOfStatement")
			]
		}
	]
	
	
	[/* Generate Unique constraint and its corresponding Index*/
	 /* now process indexes that are NOT marked as constraints*/
		ForEachChildObject("Key Group","Key Group Type")
		{
			IsNotNull(CompareStrings(PropertyValue("Key Group Type"),"AK","2"),"<FALSE>")
			DecodeProperty("Generate As Constraint","<TRUE>","<FALSE>","<Empty>")
			[Bucket("90")
				Execute("Create Key Group")
			]
		}
	]


	[/*Generate non-unique indexes (IE and IF)*/
		ForEachChildObject("Key Group","Key Group Type")
		{
			[
				IsNull([CompareStrings(PropertyValue("Key Group Type"),"PK","2")])
				IsNull([CompareStrings(PropertyValue("Key Group Type"),"AK","2")])
				[Bucket("90")
					Execute("Create Key Group")
				]
			]
		}
	]

	[
		
		ForEachChildObject("Oracle Cached View Log")
		{
			[
				Generate("")
				Execute("Create Oracle Cached View Log")
			]
		}
	]

	[
		 Option("FKConstraintInAlter")
		[
			ForEachChildObject("Key Group")
			{
				[	Bucket("91")
					"ALTER TABLE " PushOwnerX("")  [Owner("")"."]PhysicalName("") PopX("")
					"\r\n\t" "ADD " "(" IsNotNull(Execute("FKConstraint"),"<TRUE>") ")"
                    [ 
                        Option("ConstraintState")
                        PushObject("Oracle Constraint State") 
                        [
                            IsNotNull(Execute("Using Index Specify Name"))
                            DecodeProperty("Use Index","908","<Empty>")
                            [   
                                [ IsNull([DecodeProperty("Deferrable", "<TRUE>", "<Empty>", "<FALSE>", "NOT DEFERRED")])
                                  PushOwnerX("")
                                  [
                                      Execute("Create Key Group Raw Body")
                                  ]
                                  PopX("") ]
                                [ IsNull([DecodeProperty("Immediate", "<TRUE>", "IMMEDIATE", "<FALSE>", "<Empty>")])
                                  PushOwnerX("")
                                  [
                                      Execute("Create Key Group Raw Body")
                                  ]
                                  PopX("") ]
                            ]
                        ] 
                        PopX("")
                    ]
					Execute("EndOfStatement")
				]
			}
		]
	]

    [Option("ConstraintState")
     Option("ConstraintName")
        ForEachChildObject("Key Group")
        {
            [
                IsNotNull(Execute("Constraint In Create Statement"),"<FALSE>")
                [
                    PushObject("Oracle Constraint State")
                    [ 
                        PushOwnerX("") PushOwnerX("")
                        "ALTER TABLE " [ Owner("")"."]PhysicalName("")
                        PopX("") 
                        " ENABLE " ["CONSTRAINT  " QuoteProperty("Constraint Name")] " "
                        PopX("")
                        " EXCEPTIONS INTO " PushReferenceX("Exception Table Ref")  [Owner("")"."]PhysicalName("") PopX("")
                        Execute("EndOfStatement")
                    ]
                    PopX("")
                ]
            ]
        }
    ]
    
	[Option("ColumnCheckConstraint") Option("ConstraintState") Option("ConstraintName")
        Bucket("90")
        ForEachVectorReference("Physical Order List")
        {
            IsNotNull(Execute("Is Exception Table Ref"),"<FALSE>")
            [
			    PushOwnerX("")
			    "ALTER TABLE " [ Owner("")"."]PhysicalName("")
			    PopX("")
			    " ENABLE " ["CONSTRAINT " QuoteProperty("Null Option Constraint Name")] " "
			    PushObject("Oracle Constraint State")
				    [" EXCEPTIONS INTO " PushReferenceX("Exception Table Ref")  [[Owner("")"."]PhysicalName("")] PopX("")]
			    PopX("")
			    Execute("EndOfStatement")
			]
        }
        
        ForEachVectorReference("Physical Order List")
        {
			ForEachChildObject("Check Constraint Usage")   
            {
                IsNotNull(Execute("Is Exception Table Ref"),"<FALSE>")
                [
				    Bucket("90")
				    PushOwnerX("")
				    PushOwnerX("")
				    "ALTER TABLE " [ Owner("")"."]PhysicalName("")
				    PopX("") 
				    PopX("") 
				    " ENABLE " ["CONSTRAINT " PhysicalName("")] " "
				    PushObject("Oracle Constraint State")
				    " EXCEPTIONS INTO " PushReferenceX("Exception Table Ref")  [Owner("")"."]PhysicalName("") PopX("")
				    PopX("")
				    Execute("EndOfStatement")
				]
			}   
		}
	]
	
	[Option("TableCheckConstraint")	Option("ConstraintState") Option("ConstraintName")	
        Bucket("90")
        ForEachChildObject("Check Constraint Usage")
        { 
                IsNotNull(Execute("Is Exception Table Ref"),"<FALSE>")
				[
				    PushOwnerX("")
					"ALTER TABLE " [ Owner("")"."]PhysicalName("")
					PopX("") 
					" ENABLE " ["CONSTRAINT " PhysicalName("")] " "
					PushObject("Oracle Constraint State")
					" EXCEPTIONS INTO " PushReferenceX("Exception Table Ref")  [Owner("")"."]PhysicalName("") PopX("")
					PopX("")
					Execute("EndOfStatement")
				] 
		}
	]
	
	[
		
		ForEachVectorReference("Stored Procedures")
		{
			[
				Generate("")
				DecodeProperty("Type","1","<Empty>")
				[Option("TableDropProcedureSynonym") Bucket("100") Execute("Drop Synonyms For This Object")]
				[Option("TableDropProcedure") Execute("Drop Stored Procedure")]
				[Option("TableCreateProcedure") Execute("Create Stored Procedure")]
				[Option("TableCreateProcedureSynonym") Bucket("100") Execute("Create Synonyms For This Object")]
			]
		}
	]
	
	[Generate("")
		
		ForEachVectorReference("Functions Ref")
		{
			[
				Generate("")
				DecodeProperty("Type","1","<Empty>")
				[Option("TableDropFunctionSynonym") Bucket("100") Execute("Drop Synonyms For This Object")]
				[Option("TableDropFunction") Execute("Drop Function")]
				[Option("TableCreateFunction") Execute("Create Function")]
				[Option("TableCreateFunctionSynonym") Bucket("100") Execute("Create Synonyms For This Object")]
			]
		}
	]
	
	[
		Option("TablePostScript")
		ForEachVectorReference("Script Templates")
		{
			[  
				Generate("")
				Bucket("90")
				DecodeProperty("Gen As Pre Script","<TRUE>","<FALSE>","<TRUE>")
				ExpandErwinMacro("Template Code")
				"\r\n\r\n\r\n"
				EndOfStatement("")
			]
		}
	]
	
	[
		Option("TableCreateTrigger") 
		ForEachChildObject("Trigger")
		{
			[
				Generate("")
				Execute("Create Trigger")
			]
		}
	]
	

	[
		Option("ERwinGeneratedTrigger") 
		Bucket("110") EmitErwinGeneratedTriggers("")
	]
	[IsAlterScript("") 
		ForEachVectorReference("Parent Relations Ref")
		{
			[
				PushReferenceX("Child Entity Ref")
					[IsObjectType("View")
						IsNull([IsDeleted("") "Not Deleted"])
						Execute("Create View")
					]
				PopX("")
			]
		}
	]
	
	[   IsAlterScript("")
		ForEachVectorReference("Parent Relations Ref")
		{
			[
				PushReferenceX("Parent Entity Ref")
					[IsObjectType("Entity")
						PopX("")
						[
							ForEachVectorReference("Dependent Objects Ref")
							{
								IsObjectType("Key Group")
								IsNotNull([CompareStrings(PropertyValue("Key Group Type"),"IF","2")],"<False>")
								[
									IsNull([IsCreated("")  "Newly created - Suppress"])
									Execute("Create Constraint")
								]
									
							}									
						]
						PushReferenceX("Child Entity Ref")
					]
				PopX("")
			]
		}
	]
]
#}SPItemEnd


SPItemBegin =  Drop Entity
1: {#[Generate("") Once("Drop Entity")
		[
				Option("TablePreScript")
				ForEachVectorReference("Script Templates")
				{
					[
						Generate("")
						DecodeProperty("Gen As Pre Script","<TRUE>","<Empty>")
						Bucket("40") ExpandErwinMacro("Template Code")
						"\r\n\r\n\r\n"
						EndOfStatement("")
					]
				}
			]
			
		[
			
			ForEachChildObject("Key Group")
			{
				[
					Bucket("40")
					Execute("Drop Key Group")
				]
			}
		]
		
		[
			
			ForEachChildObject("Oracle Cached View Log")
			{
				[
					Generate("")
					Execute("Drop Oracle Cached View Log")
				]
			}
		]
			
		[
			Option("TableDropTrigger") 
			ForEachChildObject("Trigger")
			{
				[
					Generate("")
					Execute("Drop Trigger")
				]
			}
		]
		
		[
			Option("TableDropSynonym")
			Bucket("40") Execute("Drop Synonyms For This Object")
		]
		
		[ Generate("") FESetString("Drop Entity")	Option("DropTable")
			[IsAlterScript("") 
					ForEachVectorReference("Parent Relations Ref")
					{
						[IsNull([IsCreated("")  "Newly created - Suppress"])
							PushReferenceX("Child Entity Ref")
								[IsObjectType("View")
									Execute("Drop View")
								]
							PopX("")
						]
					}
			]
			
			[   IsAlterScript("")
				ForEachVectorReference("Child Relations Ref")
				{
					[
						PushReferenceX("Child Entity Ref")
							[IsObjectType("Entity")
								PopX("")
								[
									ForEachVectorReference("Dependent Objects Ref")
									{
										IsObjectType("Key Group")
										IsNotNull([CompareStrings(PropertyValue("Key Group Type"),"IF","2")],"<False>")
										[
											IsNull([IsCreated("")  "Newly created - Suppress"])
											Execute("Drop Constraint")
										]
											
									}									
								]
								PushReferenceX("Child Entity Ref")
							]
						PopX("")
					]
				}
			]
		
			[   IsAlterScript("")
				ForEachVectorReference("Parent Relations Ref")
				{
					[
						PushReferenceX("Parent Entity Ref")
							[IsObjectType("Entity")
								PopX("")
								[
									ForEachVectorReference("Dependent Objects Ref")
									{
										IsObjectType("Key Group")
										IsNotNull([CompareStrings(PropertyValue("Key Group Type"),"IF","2")],"<False>")
										[
											IsNull([IsCreated("")  "Newly created - Suppress"])
											Execute("Drop Constraint")
										]
											
									}									
								]
								PushReferenceX("Child Entity Ref")
							]
						PopX("")
					]
				}
			]
				
			[   IsAlterScript("") IsNotNull([IsDeleted("")  "Newly Deleted"],"<FALSE>")
			Bucket("40") "DROP TABLE IF EXISTS " [PrevOwner("")"."]PrevPhysicalName("") " CASCADE " [DBMSVersion("10")" PURGE"] 
						Execute("EndOfStatement")
			]
			
			[   IsAlterScript("") IsNull([IsDeleted("")  "Newly Deleted"]) IsNotNull([PropertyValue("Column Order List")],"<FALSE>")
					Bucket("40")
					Execute("Alter Drop All Constraints")
					Execute("Rename Table With Temporary Name")	
			]
			
			[   IsForwardEngineering("") 
			Bucket("40") "DROP TABLE IF EXISTS " [Owner("")"."]PhysicalName("") " CASCADE " [DBMSVersion("10")" PURGE"] 
						Execute("EndOfStatement")
			]
		]
	]
#}SPItemEnd


SPItemBegin =  Generate Entity
1: {#
[IsForwardEngineering()	
	[Generate("")  
				Execute("Drop Entity") ]
				
	[Generate("") 
				Execute("Create Entity") ]
]
[IsAlterScript() Once("Generate Entity")

	/* Add this entity in the data preservation list. */
    [ActivateDataPreservation()]
    
    /*Create the temp table and copy the data into it*/
    [DataPreservationOptions("PreserveData")
		
	]
    
    Execute("Drop Entity") 
    Execute("Create Entity") 
    
    /*Insert the data from temp table to the new modified table*/
    [
    DecodeProperty("Data Organization Type","913","<False>","<True>")
        [DataPreservationOptions("PreserveData") 
		    Bucket("130") "\r\n"
		    Execute("Insert Columns For Data Preservation")
		    DataPreservationOptions("RegisterEntity")
        ]
    ]
    
    /*Drop the temp table*/
    
    [
    Execute("No Drop Temp Table")
    [
    DecodeProperty("Data Organization Type","913","<False>","<True>")
        [DataPreservationOptions("DropTempTable") 
		    Bucket("140") "\r\n" 
		    Execute("Drop Temp Table")
		]
	]	
    ]
]
				
#}SPItemEnd

SPItemBegin =  Create Key Group
1: {#
[
	[ IsAlterScript("") IsNotNull(Execute("Is Owner Entity"),"<FALSE>")
		[ Execute("Create Constraint") ]
	]
	
	[ IsAlterScript("") IsNotNull(Execute("Is Owner View"),"<FALSE>")
		[ Execute("Create Constraint") ]
	]
	

]

[Generate("") IsNotNull(Execute("Index Create Option"))  
		IsNull(Execute("Index Created As Part of Constraint"))
		Bucket("90") 
		IsNotNull(Execute("Create Key Group Raw"),"<TRUE>")
		[Execute("EndOfStatement") ]
	]
#}SPItemEnd

SPItemBegin = If Key Group Body Created
10000:
{#
    /* Evaluates to TRUE if QueryString is true. */
    [QueryString("Create Key Group Body") "TRUE"]
#}
SPItemEnd

SPItemBegin =  Create Key Group Raw Body
1000: {#
[
    IsNull(Execute("If Key Group Body Created"))
	FESetString("Create Key Group Body")
    [IsNotNull(Execute("Index Storage Option")) [PushObject("Oracle Attribute Storage") Execute("Index Attributes") PopX("")]]
    [IsNotNull(Execute("Index Partition Option"))
        [
            DecodeProperty("Oracle Index Partition Type","0","<Empty>")
            "\r\n\t" "GLOBAL "
            [
                PushObject("Oracle Index Global Partition")
                [
                    DecodeProperty("Oracle Index Global Partition Type","1","<Empty>")
                    " PARTITION BY RANGE "
                    "("
                    ForEachVectorReference("Columns Ref")
                    {
                        Separator(",")
                        PhysicalName("")
                    }
                    ")"

                    "\r\n\t" "("
                    ForEachChildObject("Oracle Range Partition Info","Order")
                    {
                         Separator(",\r\n\t")
                         "PARTITION " [IsNull(Execute("Unnamed")) Name("")] " VALUES LESS THAN "
                        "(" ExpandVector("Partition Values") ")"
                        [PushObject("Oracle Partition Description") Execute("Partition Description") PopX("")]
                    }
                    ")"
                ]
                
                [
                    DecodeProperty("Oracle Index Global Partition Type","0","<Empty>")
                    " PARTITION BY HASH " "("
                    ForEachVectorReference("Columns Ref")
                    {
                        Separator(",")
                        PhysicalName("")
                    }
                    ")"

                    [
                        DecodeProperty("Oracle Index Global Hash Partition Type","0","<Empty>")
                        "\r\n\t" "("
                        ForEachChildObject("Oracle Individual Hash Partition","Order")
                        {
                            Separator(",\r\n\t")
                             "PARTITION " [IsNull(Execute("Unnamed")) Name("")]
                            [PushObject("Oracle Partitioning Storage") Execute("Partitioning Storage") PopX("")]
                        }
                        ")"

                    ]

                    [
                        DecodeProperty("Oracle Index Global Hash Partition Type","1","<Empty>")
                        "\r\n\t" "PARTITIONS " PropertyValue("Oracle Hash Partition Quantity")
                        [
                            " STORE IN ("
                            ForEachVectorReference("Oracle Tablespaces Ref")
                            {
                                Separator(",")
                                Name("")
                            }

                            " ) "
                        ]
                    ]
                 ]

                PopX("")
            ]
        ]

        /*Local Partitions*/	
        [
            DecodeProperty("Oracle Index Partition Type","1","<Empty>")
            "\r\n\t" " LOCAL "
            [
                PushObject("Oracle Index Local Partition")
                [
                    DecodeProperty("Oracle Partition Type","1","<Empty>")
                    "\r\n\t" "("
                    ForEachChildObject("Oracle Range Partition Info","Order")
                    {
                        Separator("\r\n\t,")
                         "PARTITION " [IsNull(Execute("Unnamed")) Name("")]
                        [PushObject("Oracle Partition Description") Execute("Partition Description") PopX("")]
                    }
                    ")"

                ]


                [
                    DecodeProperty("Oracle Partition Type","2","<Empty>")
                    "\r\n\t" "("
                    ForEachChildObject("Oracle List Partition Info","Order")
                    {
                        Separator(",")
                        "\r\n\t" 
                        "PARTITION " [IsNull(Execute("Unnamed")) Name("")]
                        [PushObject("Oracle Partition Description") Execute("Partition Description") PopX("")]
                        
                    }
                    ")"

                ]

                [
                    DecodeProperty("Oracle Partition Type","3","<Empty>")
                    [
                        DecodeProperty("Oracle Hash Partition Type","0","<Empty>")
                        "\r\n\t" "("
                        ForEachChildObject("Oracle Individual Hash Partition","Order")
                        {
                            Separator(",")
                            "\r\n\t" 
                            "PARTITION " [IsNull(Execute("Unnamed")) Name("")]
                            [PushObject("Oracle Partitioning Storage") Execute("Partitioning Storage") PopX("")]
                            
                        }
                        ")"
                    ]

                    [
                        DecodeProperty("Oracle Hash Partition Type","1","<Empty>")
                        "\r\n\t" "STORE IN ("
                        ForEachVectorReference("Oracle Tablespaces Ref")
                        {
                            Separator(",")
                            Name("")
                        }
                        ")"
                    ]

                ]

                [
                    DecodeProperty("Oracle Partition Type","4","<Empty>")
                    [
                        "\r\n\t" "STORE IN ("
                        ForEachVectorReference("Oracle Tablespaces Ref")
                        {
                            Separator(",")
                            Name("")
                        }
                        ")"
                    ]

                    [
                        "\r\n\t" "("
                        ForEachChildObject("Oracle Range Partition Info","Order")
                        {
                            Separator(",")
                            "\r\n\t" 
                            "PARTITION " [IsNull(Execute("Unnamed")) Name("")]
                            [PushObject("Oracle Partition Description") Execute("Partition Description") PopX("")]
                            
                        }
                        ")"
                    ]
                ]
                PopX("")
            ]
        ]
    ]
]
#}SPItemEnd

SPItemBegin =  Constraint Is Deferred
1: {# [  
        [ PushObject("Oracle Constraint State")
          [IsNull([DecodeProperty("Deferrable", "<TRUE>", "<Empty>", "<FALSE>", "NOT DEFERRED", "DEFER NOT SET")])
          IsNull([DecodeProperty("Immediate", "<TRUE>", "IMMEDIATE", "<FALSE>", "<Empty>", "IMMED NOT SET")])
          "Constraint Is Not Deferred"]
          PopX("")]
	]
#}SPItemEnd

SPItemBegin =  Create Key Group Raw
1: {# [         Once("Create Key Group")
		FESetString("Create Key Group")
		"CREATE" ["  " IsNull([Execute("Constraint Is Deferred")]) DecodeProperty("Is Unique","<TRUE>","UNIQUE")] ["  "DecodeProperty("Oracle Bitmap","<TRUE>","BITMAP")] " INDEX " [Owner("")"."]PhysicalName("") " ON " PushOwnerX("")  [Owner("")"."]PhysicalName("") PopX("")
		"\r\n("
		IsNotNull(Execute("KeyGroupMembers"),"<TRUE>")
		"\r\n)"
        Execute("Create Key Group Raw Body")
	]
#}SPItemEnd

SPItemBegin =  Key Group Has Members
1:
{#
[
	[IsNotNull([PropertyValue("Index Member Order List")],"<FALSE>") "Has Members"]
	[AllObjectsHaveBeenDeleted("Key Group Member") "Had Members"]
]
#}
SPItemEnd


SPItemBegin =  Index Was Unique
1:
{#
[
	[CompareStrings(OldPropertyValue("Key Group Type"),"PK","2")	"PK"	]
	[CompareStrings(OldPropertyValue("Key Group Type"),"AK","2")	"AK"	]
	[IsNull([OldPropertyValue("Key Group Type")])	IsNull([IsCreated("") "Created"]) "Generate"]
]
#}
SPItemEnd


SPItemBegin =  Drop Key Group
1: {#   

	[	
		IsAlterScript("")
		IsNull([AllObjectsAreNewlyCreated("Key Group Member") "Suppress Statement"])
		IsNotNull(Execute("Key Group Has Members"),"<FALSE>")
		[ 
			IsNotNull(Execute("Is Owner Entity"),"<FALSE>")
			[ IsNotNull(Execute("Index Was Unique"),"<FALSE>") Execute("Drop Constraint") ]
		]
		
		[ IsAlterScript("") IsNotNull(Execute("Is Owner View"),"<FALSE>")
			[ Execute("Drop Constraint") ]
		]
	
		[
			Once("Drop Key Group") Generate("")
			Bucket("40") IsNotNull(Execute("Index Drop Option"))  
			IsNull(Execute("This Entity Deleted"))
			"DROP INDEX IF EXISTS " [PrevOwner("")"."]PrevPhysicalName("") 
					Execute("EndOfStatement") 
		]
	]
	
	
	[IsForwardEngineering("")	
		Once("Drop Key Group") Generate("")
		Bucket("40") IsNotNull(Execute("Index Drop Option"))  
		"DROP INDEX IF EXISTS " [Owner("")"."]PhysicalName("") 
				Execute("EndOfStatement") 
	]
#}SPItemEnd

SPItemBegin =  Generate Key Group
1: {#   [
					Execute("Drop Key Group") 
		]

		[
					Execute("Create Key Group")
		]
#}SPItemEnd

SPItemBegin =  Create Oracle Cached View Log
1: {# [ Once("Create Cached View Log")
		FESetString("Create Cached View Log")
		
		Bucket("90") Option("TableCreateMaterializedViewLog")
		"CREATE MATERIALIZED VIEW LOG ON " PushOwnerX("")  [Owner("")"."][PhysicalName("")] PopX("")
		[Option("MaterializedViewLogPhysicalStorage") PushObject("Oracle Physical Storage") Execute("Physical Attributes") PopX("") ]
		["\r\n\t" DecodeProperty("Oracle Cache","<TRUE>","CACHE","<FALSE>","NOCACHE")]
		["\r\n\t" DecodeProperty("Use Parallel", "904", "PARALLEL", "905","NOPARALLEL") [" " PropertyValue("Oracle Parallel") ]]
		["\r\n\t" DecodeProperty("Oracle NoLogging","<FALSE>","LOGGING","<TRUE>","NOLOGGING") ]
		[Option("MaterializedViewLogPhysicalStorage") "\r\n\t" "TABLESPACE " PushReferenceX("Oracle Tablespace Ref") Name("") PopX("")]
		[Option("MaterializedViewLogPartitions") Execute("Table Partition")]
		["\r\n\t WITH " IsNotNull(Execute("Materailized View Log With Clause"),"<TRUE>")]
		["\r\n\t" DecodeProperty("Exclude","<TRUE>","EXCLUDING","<FALSE>","INCLUDING") "  NEW VALUES"]
		[Execute("EndOfStatement")]
		
		[Option("Comments") Bucket("90") "COMMENT ON TABLE " PushOwnerX("") [Owner("")"."]Execute("Generate Materialized View Log Name") PopX("") " IS '"  
				 SubstituteString(TranslatedValue("Definition"),"'","''") "'" Execute("EndOfStatement") ]
	]
#}SPItemEnd

SPItemBegin =  Generate Materialized View Log Name
1: {#   [
			[Option("QuoteName") "\"MLOG$_" PhysicalName("<FALSE>")"\"" ]
			[Option("!QuoteName") "MLOG$_"PhysicalName("<FALSE>") ]
		]
#}SPItemEnd

SPItemBegin =  Drop Oracle Cached View Log
1: {# [Once("Drop Cached View Log")
	  FESetString("Drop Cached View Log")
			
		Bucket("40") Option("TableDropMaterializedViewLog") 
		"DROP MATERIALIZED VIEW LOG ON " PushOwnerX("")  [Owner("")"."][PhysicalName("")] PopX("")
		Execute("EndOfStatement") 
	 ]
#}SPItemEnd

SPItemBegin =  Generate Oracle Cached View Log
1: {# 
		[
			Generate("") 
				Execute("Drop Oracle Cached View Log") 
		]
		[
			Generate("") 
				Execute("Create Oracle Cached View Log") 
		]		
#}SPItemEnd


SPItemBegin =  Create Oracle Cluster
1: {#[
		Once("Create Cluster")
		FESetString("Create Cluster")
		Bucket("75") Option("CreateCluster")
		"CREATE CLUSTER " [Owner("")"."]Name("")
		"\r\n("
			ForEachChildObject("Oracle Cluster Column","Order")
			{
				Separator(",")
				"\r\n\t" Name("")  "  " PropertyValue("Datatype") "  " [DecodeProperty("Oracle Sort Column","<TRUE>","SORT")]
			}
		"\r\n)"
		[PushObject("Oracle Physical Storage") Execute("Physical Attributes") PopX("") ]
		["\r\n\t" "SIZE " PropertyValue("Oracle Size") ]
		["\r\n\t" "TABLESPACE " PushReferenceX("Oracle Tablespace Ref") Name("") PopX("") ]
		["\r\n\t" DecodeProperty("Oracle Index", "<TRUE>", "INDEX")]
		["\r\n\t" [DecodeProperty("Single Table", "<TRUE>", "SINGLE TABLE") "  "] "HASHKEYS " PropertyValue("Oracle Hash Keys") [ " HASH IS  " PropertyValue("Hash Expression")]  ]
		["\r\n\t" DecodeProperty("Use Parallel", "904", "PARALLEL","905","NOPARALLEL") "  " [  PropertyValue("Oracle Parallel")  ]  ]
		["\r\n\t" DecodeProperty("Oracle Row Dependencies", "<TRUE>", "ROWDEPENDENCIES", "<FALSE>", "NOROWDEPENDENCIES")]
		["\r\n\t" DecodeProperty("Oracle Cache", "<TRUE>", "CACHE", "<FALSE>", "NOCACHE") " "]
		Execute("EndOfStatement")
	]
	
	[ 
		PushObject("Oracle Cluster Index") Execute("Create Oracle Cluster Index") PopX("")
	]
        #}SPItemEnd

SPItemBegin =  Drop Oracle Cluster
1: {#[ 
		[
			PushObject("Oracle Cluster Index") 
				[
					IsNull([IsCreated("") "Newly created - Suppress"])
					Execute("Drop Oracle Cluster Index")
				]
			PopX("")
		]
	]
	
	[Once("Drop Cluster")
	 FESetString("Drop Cluster")
		Option("DropCluster") Bucket("55") "DROP CLUSTER " [PrevOwner("")"."]PrevPhysicalName("") 
				Execute("EndOfStatement")
	 ]
        #}SPItemEnd

SPItemBegin =  Create Oracle Cluster Index
1: {#[  Once("Create Cluster Index")
		FESetString("Create Cluster Index")
		Bucket("75") Option("CreateClusterIndex")
		"CREATE " [DecodeProperty("Is Unique","<TRUE>", "UNIQUE")] " INDEX " [Owner("")"."]Name("") " ON CLUSTER "[PushOwnerX("")  [Owner("")"."]Name("") PopX("")]
		[Option("CreateClusterIndexPhysicalStorage") PushObject("Oracle Attribute Storage") Execute("Index Attributes") PopX("")]
		Execute("EndOfStatement")
	]
        #}SPItemEnd



SPItemBegin =  Drop Oracle Cluster Index
1: {#[ Once("Drop Cluster Index")
	  FESetString("Drop Cluster Index")
	 
		Bucket("55") Option("DropClusterIndex")
		"DROP INDEX IF EXISTS " [PrevOwner("")"."]PrevPhysicalName("") 
			Execute("EndOfStatement") 
	]
#}SPItemEnd


SPItemBegin =  Generate Oracle Cluster Index
1: {# [
		 Generate("") 
				Execute("Drop Oracle Cluster Index")
	 ]
	 [
		 Generate("") 
				Execute("Create Oracle Cluster Index")
	 ]
#}SPItemEnd


SPItemBegin =  Generate Oracle Cluster
1: {#[   Generate("") 
				Execute("Drop Oracle Cluster")
	]
	 
	[
		 Generate("") 
				Execute("Create Oracle Cluster")
	 ]
#}SPItemEnd


SPItemBegin =  Create Oracle Rollback Segment
1: {#[  Generate("") Once("Create Oracle Rollback Segment")
		FESetString("Create Oracle Rollback Segment")
		Bucket("70") Option("CreateRollbackSeg") 
		"CREATE " [DecodeProperty("Oracle Public","<TRUE>", "PUBLIC")] " ROLLBACK SEGMENT " Name("")
		["\r\n\t" "TABLESPACE " PushReferenceX("Oracle Tablespace Ref") Name("") PopX("")]
		[PushObject("Oracle Physical Storage") ["\r\n\t" "STORAGE ( " IsNotNull(Execute("Storage"),"<TRUE>") "\r\n\t )"] PopX("")]
		Execute("EndOfStatement")
		
		[
			"ALTER ROLLBACK SEGMENT " Name("")
			" " DecodeProperty("Oracle Offline","<TRUE>", "OFFLINE","<FALSE>","ONLINE")
			Execute("EndOfStatement")
		]
		
	]
          #}SPItemEnd


SPItemBegin =  Drop Oracle Rollback Segment
1: {#[Once("Drop Oracle Rollback Segment")
	  FESetString("Drop Oracle Rollback Segment")
		Bucket("60") Option("DropRollbackSeg") 
			"DROP ROLLBACK SEGMENT " Name("") 
				Execute("EndOfStatement") 
		]
#}SPItemEnd


SPItemBegin =  Generate Oracle Rollback Segment
1: {# [
		Execute("Drop Oracle Rollback Segment")
	 ]
	 [
		Execute("Create Oracle Rollback Segment")
	 ]
#}SPItemEnd

 
SPItemBegin = Is FILE OFFLINE
10000:
{#
      ForEachChildObject("Oracle Physical File")
      {
          DecodeProperty("Oracle Offline", "<TRUE>", "OFFLINE")
      }
#}
SPItemEnd

SPItemBegin =  Create Oracle Tablespace
1: {#[Once("Create Oracle Tablespace")
		FESetString("Create Oracle Tablespace")
		
		Option("CreateTablespace") Generate("")
		[/*Extent Management Type is Local  or not specified*/
			DecodeProperty("Extent Management Type", "922", "<FALSE>","<TRUE>")
			[	Bucket("65")
				"CREATE " [DecodeProperty("Storage File Type","0", "BIGFILE","1","SMALLFILE")] [DecodeProperty("Tablespace Type","1", " TEMPORARY","0"," UNDO")] " TABLESPACE " Name("")
				[DecodeProperty("Tablespace Type","2","<Empty>") Execute("Permanent Tablespace")]
				[DecodeProperty("Tablespace Type","1","<Empty>") Execute("Temporary Tablespace")]
				[DecodeProperty("Tablespace Type","0","<Empty>") Execute("Undo Tablespace")]
				Execute("EndOfStatement")
			]
		]
		[/*Extent Management Type is Dictionary*/
			DecodeProperty("Extent Management Type", "922", "<TRUE>")
			[	Bucket("65")
				"CREATE " [DecodeProperty("Storage File Type","0", "BIGFILE","1","SMALLFILE")] [DecodeProperty("Tablespace Type","0"," UNDO")] " TABLESPACE " Name("")
				[Execute("Permanent Tablespace")]
				Execute("EndOfStatement")
			]
		]
		[Bucket("65")
			"ALTER TABLESPACE " Name("")
			"\r\n\t" DecodeProperty("Read Only","<TRUE>","READ ONLY")
			Execute("EndOfStatement")
		]
		[ Bucket("65")
           IsNotNull(Execute("Is FILE OFFLINE"),"<FALSE>")
			"ALTER TABLESPACE " Name("")
			"\r\n\t" 
            [  
               DecodeProperty("Tablespace Type","1","<TRUE>")
               DecodeProperty("Extent Management Type", "923", "TEMPFILE OFFLINE ","922", "DATAFILE OFFLINE ","TEMPFILE OFFLINE ")
            ]
            [
               DecodeProperty("Tablespace Type","1","<FALSE>", "<TRUE>")
               "DATAFILE OFFLINE "
            ]
			Execute("EndOfStatement")
		]
	]
#}SPItemEnd


SPItemBegin =  Drop Oracle Tablespace
1: {#[ Once("Drop Oracle Tablespace")
	  FESetString("Drop Oracle Tablespace")
	  
		Bucket("65") Option("DropTablespace") Generate("")
			"DROP TABLESPACE IF EXISTS " PrevPhysicalName("") " INCLUDING CONTENTS " [DBMSVersion("9","10") " AND DATAFILES "] "CASCADE " Execute("EndOfStatement")
	]
#}SPItemEnd


SPItemBegin =  Generate Oracle Tablespace
1: {# [ 
			Execute("Drop Oracle Tablespace")
	 ]
	 [
			Execute("Create Oracle Tablespace")
	 ]
#}SPItemEnd

SPItemBegin =  Create Oracle Package
1: {#[Once("Create Oracle Package")
		FESetString("Create Oracle Package")
		
		Option("CreatePackage") 
		[	Bucket("95")
			ExpandErwinMacro("Template Spec")
			"\r\n\/\r\n\r\n"
			EndOfStatement("")
		]
	
		[	Bucket("95")
			ExpandErwinMacro("Template Code")
			"\r\n\/\r\n\r\n"
			EndOfStatement("")
		]
	]
		
	[
			ForEachChildObject("Oracle Context")
			{
				Execute("Create Oracle Context")
			}
	]
		
	
	[Option("CreatePackageSynonym") Bucket("95")
		Execute("Create Synonyms For This Object")
	]
		
 #}SPItemEnd


SPItemBegin =  Drop Oracle Package
1: {#   [ Option("DropPackageSynonym")
			Bucket("95") Execute("Drop Synonyms For This Object")
		]
	
		[
				ForEachChildObject("Oracle Context")
				{
					Execute("Drop Oracle Context")
				}
		]

		[Once("Drop Oracle Package")
		FESetString("Drop Oracle Package")
			Bucket("95") Option("DropPackage")  "DROP PACKAGE "  [PrevOwner("")"."]Name("")   
				Execute("EndOfStatement")   
		]
 #}SPItemEnd



SPItemBegin =  Generate Oracle Package
1: {#   [
			Execute("Drop Oracle Package")
		]
				
		[
			Execute("Create Oracle Package") 
		] 
#}SPItemEnd

SPItemBegin =  Create Oracle Context
1: {#   [   Generate("") Once("Create Oracle Context")
		    FESetString("Create Oracle Context")
			Bucket("95") Option("CreatePackageContext")
			"CREATE " [ DecodeProperty("Use Create Or Replace","<TRUE>","<Empty>") "OR REPLACE "] " CONTEXT " Name("") " USING " PushOwnerX("")  [Owner("")"."]Name("") PopX("")
				["\r\n\t" DecodeProperty("Type","0","INITIALIZED EXTERNALLY", "1", "ACCESSED GLOBALLY","2", "INITIALIZED GLOBALLY")]
				Execute("EndOfStatement")
		]
        #}SPItemEnd

SPItemBegin =  Drop Oracle Context
1: {#   [
		Once("Drop Oracle Context")
		FESetString("Drop Oracle Context")
		Bucket("95") Option("DropPackageContext")  "DROP CONTEXT "  Name("")   
				Execute("EndOfStatement") 
	   ]
#}SPItemEnd



SPItemBegin =  Generate Oracle Context
1: {#   [
			Execute("Drop Oracle Context") 
		]
		
		[ 
			Execute("Create Oracle Context") 
		]
#}SPItemEnd


SPItemBegin =  Create Stored Procedure
1: {#   [
		Once("Create Stored Procedure")
		FESetString("Create Stored Procedure")
		
		Bucket("100") 
		ExpandErwinMacro("Template Code")
		"\r\n\/\r\n\r\n"
		EndOfStatement("")
		]
#}SPItemEnd

SPItemBegin =  Drop Stored Procedure
1: {#   [
			Once("Drop Stored Procedure")
			FESetString("Drop Stored Procedure")
			Bucket("100") 
			"DROP PROCEDURE "  [PrevOwner("")"."]PrevPhysicalName("")   Execute("EndOfStatement") 
	    ]
#}SPItemEnd



SPItemBegin =  Generate Stored Procedure
1: {#   [
			Execute("Drop Stored Procedure") 
		]
		
		[
			Execute("Create Stored Procedure")
		]
 #}SPItemEnd

SPItemBegin =  Create Function
1: {#   [Once("Create Function")
		FESetString("Create Function")
			Bucket("105") 
				ExpandErwinMacro("Template Code")
			"\r\n\/\r\n\r\n"
			EndOfStatement("")
		]
        #}SPItemEnd

SPItemBegin =  Drop Function
1: {#   [
		Once("Drop Function")
		FESetString("Drop Function")
			
		 Bucket("105")  
		 "DROP FUNCTION "  [Owner("")"."]Name("")   Execute("EndOfStatement") 
	   ]
#}SPItemEnd


SPItemBegin =  Generate Function
1: {#   [ 
				Execute("Drop Function")
		] 
		[
				Execute("Create Function")
		]
 #}SPItemEnd

SPItemBegin =  Create Trigger
1: {#           
			[
				IsNull(Execute("Is Owner Database"))
				Once("Create Trigger")
				FESetString("Create Trigger")
			
				Bucket("115")
				["\r\n" ExpandErwinMacro("Trigger Body")
				]
				"\r\n\/\r\n\r\n"
				EndOfStatement("")
			]
			
			[
			IsNotNull(Execute("Is Owner Database"),"<FALSE>")
			Once("Create Trigger")
			FESetString("Create Trigger")
		
			Bucket("115")
			["\r\n" ExpandErwinMacro("Trigger Body")
			]
			"\r\n\/\r\n\r\n"
			EndOfStatement("")
		]
		[Bucket("115")
			"\r\n\r\nALTER TRIGGER " [Owner("")"."]Name("")
			"\r\n\t" DecodeProperty("Trigger Disabled","0","ENABLE","1","DISABLE")
			Execute("EndOfStatement")
		]
        #}SPItemEnd

SPItemBegin =  Drop Trigger
1: {#   [Once("Drop Trigger")
		FESetString("Drop Trigger")
		
			Bucket("40") "DROP TRIGGER "  [PrevOwner("")"."]PrevPhysicalName("")  
					 Execute("EndOfStatement")    
		]
#}SPItemEnd


SPItemBegin =  Generate Trigger
1:  {#  [
			Execute("Create Trigger") 
		]
		
		[
			Execute("Drop Trigger") 
		]
#}SPItemEnd

SPItemBegin = Alter Allow Modify Cached View Properties
10000: 
{#
[
	IsModifiedList("Name", "Definition")
		"ALTER MODIFY HANDLED"
] 
#}
SPItemEnd


SPItemBegin = Alter Modify Cached View
1:
{# 
[
	/* Process the  (EMXTypes::pName) property of the Materailized View. */
	[IsPropModified("Name")
		[	    IsNull([IsPropModified("DB Owner") "Owner Change"])
				Once("Alter Modify Object Physical Name")
				IsNull(Execute("Rename Object"))
				Bucket("30") "\r\n"
				RecordAlter("")
				"RENAME "
						PrevPhysicalName("") 
				" TO "  Name("")
				[ Execute("EndOfStatement") ]
		]
	]
		
	/* Process the  (EMXTypes::pDefinition) property of the Cached View. */
	[IsPropModified("Definition")
		[	
				[DBMSVersion("8","9")
					Generate("") Option("Comments") 
					Bucket("90") 
					RecordAlter("")
					"COMMENT ON TABLE " [Owner("")"."]Name("") " IS '"  
					[SubstituteString(TranslatedValue("Definition"),"'","''")] "'" Execute("EndOfStatement") 
				]
				
				
				[DBMSVersion("10")
					Generate("") Option("Comments") 
					Bucket("90") 
					RecordAlter("")
					"COMMENT ON MATERIALIZED VIEW " [Owner("")"."]Name("") " IS '"  
					[SubstituteString(TranslatedValue("Definition"),"'","''")] "'" Execute("EndOfStatement") 
				]

		]
	]
	
	
	[
		IsNull(Execute("Alter Allow Modify Cached View Properties"))
		[
			Execute("Generate Cached View")
		]
	]	
]	
#}
SPItemEnd



SPItemBegin = Alter Allow Modify View Properties
10000: 
{#
[
	IsModifiedList("Name", "Definition")
		"ALTER MODIFY HANDLED"
] 
#}
SPItemEnd


SPItemBegin = Alter Modify View
1:
{# 
[	
	/* Process the  (EMXTypes::pName) property of the View. */
	[IsPropModified("Name")
		[	    IsNull([IsPropModified("DB Owner") "Owner Change"])
				Once("Alter Modify Object Physical Name")
				IsNull(Execute("Rename Object"))
				Bucket("30") "\r\n"
				RecordAlter("")
				"RENAME "
						PrevPhysicalName("") 
				" TO "  Name("")
				[ Execute("EndOfStatement") ]
		]
	]
	
	/* Process the  (EMXTypes::pDefinition) property of the View. */
	[IsPropModified("Definition")
		[	
				[
					Generate("") Option("Comments") 
					Bucket("90") 
					RecordAlter("")
					"COMMENT ON TABLE " [Owner("")"."]Name("") " IS '"  
					[SubstituteString(TranslatedValue("Definition"),"'","''")] "'" Execute("EndOfStatement") 
				]

		]
	]
	
	
	[
		IsNull(Execute("Alter Allow Modify View Properties"))
		[
			Execute("Generate View")
		]
	]	
]	
#}
SPItemEnd


SPItemBegin = Alter Allow Modify Entity Properties
10000: 
{#
[
	IsModifiedList("Physical Name","Name","DB Owner", "Comment","Definition", "Physical Order List", "Column Order List", "Attribute Order List")
		"ALTER MODIFY HANDLED"
] 
#}
SPItemEnd


SPItemBegin = Alter Modify Entity
1:
{# 
[
	[IsPropModified("Physical Name","Name")
		[
			Once("Alter Modify Object Physical Name")
			IsNull(Execute("Rename Object"))
			Bucket("30") "\r\n"
			RecordAlter("")
			"ALTER TABLE "
					[Owner("")"."]PrevPhysicalName("") 
			" RENAME TO "  PhysicalName("")
			[ Execute("EndOfStatement") ]
		]
	]
	
	/* Process the Owner (EMXTypes::pDBOwner) property of the Entity. */
	[IsPropModified("DB Owner")
		[
	
			Execute("Alter Modify Object DB Owner")
		]
	]
	
	/* Process the  (EMXTypes::pPhysicalOrderList) property of the Entity. */
	[IsPropModified("Physical Order List")
		Option("ColumnPhysicalOrder")
		[ListRearranged("Physical Order List")
	
			[Execute("Generate Entity")]
		]
	]
	
	/* Process the  (EMXTypes::pColumnOrderList) property of the Entity. */
	[IsPropModified("Column Order List")
		[	Option("!ColumnPhysicalOrder")
			ListRearranged("Column Order List")
	
			[Execute("Generate Entity")]
		]
	]
	
	/* Process the  (EMXTypes::pComment) property of the Entity. */
	[IsPropModified("Definition", "Comment")
		[	
				[
					Generate("") Option("Comments") 
					Bucket("90") 
					RecordAlter("")
					"COMMENT ON TABLE " [Owner("")"."]PhysicalName("") " IS '"  
					[SubstituteString(TranslatedValue("Comment"),"'","''")] "'" Execute("EndOfStatement") 
				]

		]
	]
	
	
	[
		IsNull(Execute("Alter Allow Modify Entity Properties"))
		[
			Execute("Generate Entity")
		]
	]	
]	
#}
SPItemEnd

SPItemBegin = Alter Allow Modify Synonym Properties
10000: 
{#
[
	IsModifiedList("Name")
		"ALTER MODIFY HANDLED"
] 
#}
SPItemEnd


SPItemBegin = Alter Modify Synonym
1:
{# 
[
	[IsPropModified("Name")
		[
			Once("Alter Modify Object Physical Name")
			IsNull(Execute("Rename Object"))
			Bucket("30") "\r\n"
			RecordAlter("")
			"RENAME "
					[Owner("")"."]PrevPhysicalName("") 
			" TO "  [Owner("")"."]Name("")
			[ Execute("EndOfStatement") ]
		]
	]
	
	
	[
		IsNull(Execute("Alter Allow Modify Synonym Properties"))
		[
			Execute("Generate Synonym")
		]
	]	
]	
#}
SPItemEnd

SPItemBegin = Alter Allow Modify Sequence Properties
10000: 
{#
[
	IsModifiedList("Name")
		"ALTER MODIFY HANDLED"
] 
#}
SPItemEnd


SPItemBegin = Alter Modify Sequence
1:
{# 
[
	/* Process the  (EMXTypes::pName) property of the Materailized View. */
	[IsPropModified("Name")
		[	    IsNull([IsPropModified("DB Owner") "Owner Change"])
				Once("Alter Modify Object Physical Name")
				IsNull(Execute("Rename Object"))
				Bucket("30") "\r\n"
				RecordAlter("")
				"RENAME "
						PrevPhysicalName("") 
				" TO "  Name("")
				[ Execute("EndOfStatement") ]
		]
	]
	

	[
		IsNull(Execute("Alter Allow Modify Sequence Properties"))
		[
			Execute("Generate Sequence")
		]
	]	
]	
#}
SPItemEnd


SPItemBegin = Alter Allow Modify Trigger Properties
10000: 
{#
[
	IsModifiedList("Name")
		"ALTER MODIFY HANDLED"
] 
#}
SPItemEnd


SPItemBegin = Alter Modify Trigger
1:
{# 
[
	[IsPropModified("Name")
		[DBMSVersion("8")
			Execute("Generate Trigger")
		]
		[IsNull([DBMSVersion("8") "Version 8"])
			Once("Alter Modify Object Physical Name")
			IsNull(Execute("Rename Object"))
			Bucket("30") "\r\n"
			RecordAlter("")
			"ALTER TRIGGER "
					[Owner("")"."]PrevPhysicalName("") 
			" RENAME TO "  PhysicalName("")
			[ Execute("EndOfStatement") ]
		]
	]
	
	
	[
		IsNull(Execute("Alter Allow Modify Trigger Properties"))
		[
			Execute("Generate Trigger")
		]
	]	
]	
#}
SPItemEnd


SPItemBegin = Drop Oracle Constraint State
1: 
{#
[
	[ 
		PushOwnerX("")
			[	IsNull([IsDeleted("") "Owner Deleted"])
				[IsObjectType("Entity") PopX("") [Execute("Generate Table Check Constraint Usage")]]
				[IsObjectType("Attribute") PopX("") [Execute("Generate Check Constraint Usage")]]	
				[IsObjectType("Key Group") PopX("") [Execute("Generate Key Group")]]	
			]
		PopX("")
	]
	
]
#}
SPItemEnd


SPItemBegin = Create Oracle Constraint State
1: 
{#
[
	[ 
		PushOwnerX("")
			[	IsNull([IsCreated("") "Owner Created"])
				
				PushOwnerX("")
				[IsObjectType("Entity") PopX("") [IsObjectType("Check Constraint Usage") Execute("Generate Table Check Constraint Usage")]]
				[IsObjectType("Entity") PopX("") [IsObjectType("Key Group") Execute("Generate Key Group")]]
				[IsObjectType("Attribute") PopX("") [Execute("Generate Check Constraint Usage")]]	
			]
		PopX("")
	]
	
]
#}
SPItemEnd

SPItemBegin = Alter Modify Oracle Constraint State
1: 
{#
[
	[ 
		PushOwnerX("")
			[	IsNull([IsModified("") "Owner Modified"])
				
				PushOwnerX("")
				[IsObjectType("Entity") PopX("") 
				    [IsObjectType("Check Constraint Usage") [Execute("Generate Table Check Constraint Usage")]]
				    [IsObjectType("Key Group") [Execute("Generate Key Group")]]
				]
				[IsObjectType("Attribute") PopX("") [Execute("Generate Check Constraint Usage")]]	
			]
		PopX("")
	]
	
]
#}
SPItemEnd



SPItemBegin = Alter Allow Modify Key Group Properties
10000: 
{#
[
	IsModifiedList("Physical Name","Name","Constraint Name","DB Owner", "Key Group Member Order List")
		"ALTER MODIFY HANDLED"
] 
#}
SPItemEnd



SPItemBegin = Alter Modify Key Group
1: 
{#
[
	/* Process the Physical Name (EMXTypes::pPhysicalName) property of the Key Group. */
	[IsPropModified("Physical Name","Name")
		[
			Once("Alter Modify Object Physical Name")
			IsNull(Execute("Rename Object"))
			Bucket("30") "\r\n"
			RecordAlter("")
			"ALTER INDEX "
					[Owner("")"."]PrevPhysicalName("") 
			" RENAME TO "  PhysicalName("")
			[ Execute("EndOfStatement") ]
		]
	]
	
	/* Process the Constriant Name (EMXTypes::pConstriantName) property of the Key Group. */
	[IsPropModified("Constraint Name")
		[
			Once("Alter Modify Object Constriant Name")
			IsNull(Execute("Rename Constraint"))
			Bucket("30") "\r\n"
			RecordAlter("")
			PushOwnerX("")
			"ALTER TABLE "
					[Owner("")"."]PhysicalName("") 
			PopX("")
			" RENAME CONSTRAINT "  [OldPropertyValue("Constraint Name")  " To " PropertyValue("Constraint Name")]
			[ Execute("EndOfStatement") ]
		]
	]

	/* Process the Owner (EMXTypes::pDBOwner) property of the Key Group. */
	[IsPropModified("DB Owner")
		[
	
			Execute("Alter Modify Object DB Owner")
		]
	]
	
	[
		IsNull(Execute("Alter Allow Modify Key Group Properties"))
		[ Execute("Generate Key Group") ]
	]
	
]
#}
SPItemEnd


SPItemBegin = Alter Allow Modify Relationship Properties
10000: 
{#
[
	IsModifiedList("Physical Name","Name", "Alias Name")
		"ALTER MODIFY HANDLED"
] 
#}
SPItemEnd


SPItemBegin = Alter Modify Relationship
1:
{# 
[
	[IsPropModified("Physical Name","Name")
		[
			IsNull(Execute("Rename Object"))
			Once("Alter Modify Object Physical Name")
			
			Bucket("30") "\r\n"
			RecordAlter("")
			PushReferenceX("Child Entity Ref")
			"ALTER TABLE "
					[Owner("")"."]PrevPhysicalName("") 
			PopX("")
			" RENAME CONSTRAINT "  PrevPhysicalName("")  " To " PhysicalName("")
			[ Execute("EndOfStatement") ]
		]
	]
	
	[IsPropModified("Alias Name")
		[
			PushReferenceX("Child Entity Ref")
			[
				IsObjectType("View", "Cached View")
				Execute(Execute("Modify Object"))
			]
			PopX("")
		]
	]
	
	[
		IsNull(Execute("Alter Allow Modify Relationship Properties"))
		[
			ForEachVectorReference("Dependent Objects Ref")
			{
				IsObjectType("Key Group")
				IsNotNull([CompareStrings(PropertyValue("Key Group Type"),"IF","2")],"<False>")
				[
					Execute("Drop Constraint")
					Execute("Create Constraint")
				]
					
			}
		]
	]	
]	
#}
SPItemEnd


SPItemBegin = Drop Constraint
10000:
{#
    /* Drops a PK, AK (Unique), or FK table constraint for a single key group.
    */

    /* Build drop table constraint statement.
       Note that a constraint name is required for this statement to generate.
    */
    [

    
         [	Option("PKConstraintInAlter")
			DecodeProperty("Generate As Constraint","<TRUE>","<Empty>")
			IsNotNull(CompareStrings(PropertyValue("Key Group Type"),"PK","2"),"<FALSE>")
			Once("Drop Constraint")
			Bucket("37")
			
	        PushOwnerX("")
	        [IsObjectType("View")
				"ALTER "  "VIEW " [PrevOwner("")"."] PrevPhysicalName("")
				"\r\n"
				PopX("")
				"DROP PRIMARY KEY CASCADE " 
				[Execute("EndOfStatement")]
			]
			
			[ IsObjectType("Entity")
				"ALTER " "TABLE " [PrevOwner("")"."] PrevPhysicalName("")
				"\r\n"
				PopX("")
				"DROP PRIMARY KEY CASCADE " [DBMSVersion("10") " DROP INDEX"]
				[Execute("EndOfStatement")]
			]
		]

		[	Option("AKConstraintInAlter")
			DecodeProperty("Generate As Constraint","<TRUE>","<Empty>")
			IsNotNull(CompareStrings(PropertyValue("Key Group Type"),"AK","2"),"<FALSE>")
			Once("Drop Constraint")
			Bucket("37")
			
	        
	        PushOwnerX("")
	        [
				IsObjectType("View")
				"ALTER "  "VIEW " [PrevOwner("")"."] PrevPhysicalName("")
				"\r\n"
				PopX("")
				"DROP CONSTRAINT " 	
					[ IsNotNull([IsDeleted("") "Deleted"],"<FALSE>") OldPropertyValue("Constraint Name")  ]
					[ IsNotNull([IsDeleted("") "Deleted"],"<FALSE>") IsNull([OldPropertyValue("Constraint Name")]) PrevPhysicalName("")  ]
					[ IsNull([IsDeleted("") "Deleted"]) PropertyValue("Constraint Name")  ]
				[Execute("EndOfStatement")]
			]
			
			[
				IsObjectType("Entity")
				"ALTER " "TABLE " [PrevOwner("")"."] PrevPhysicalName("")

				"\r\n"
				PopX("")
				"DROP CONSTRAINT " 	
					[ IsNotNull([IsDeleted("") "Deleted"],"<FALSE>") OldPropertyValue("Constraint Name") " CASCADE "[DBMSVersion("10") " DROP INDEX"] ]
					[ IsNotNull([IsDeleted("") "Deleted"],"<FALSE>") IsNull([OldPropertyValue("Constraint Name")]) PrevPhysicalName("") " CASCADE "[DBMSVersion("10") " DROP INDEX"] ]
					[ IsNull([IsDeleted("") "Deleted"]) PropertyValue("Constraint Name") " CASCADE "[DBMSVersion("10") " DROP INDEX"] ]
				[Execute("EndOfStatement")]
			]
		]


		[	Option("FKConstraintInAlter")
			<IsNotNull(Execute("Generate Relation"),"<FALSE>")>
			IsNotNull(CompareStrings(PropertyValue("Key Group Type"),"IF","2"),"<FALSE>")
			Once("Drop Constraint")
			Bucket("36")
			
	        
	        PushOwnerX("")
			"ALTER " [ IsObjectType("Entity") "TABLE " ] [ IsObjectType("View") "VIEW " ] [Owner("")"."] PhysicalName("")
			"\r\n"
			PopX("")
			"DROP CONSTRAINT " 	
			PushReferenceX("Relationship Ref")
					PrevPhysicalName("")
			PopX("")
			[Execute("EndOfStatement")]
		]
    ]
#}
SPItemEnd


SPItemBegin = Create Constraint
10000:
{#      
[
    /* Creates a PK, AK (Unique), or FK table constraint for a single key group.
    */
    
    /* Build alter table constraint statement.
    */
    
    [		Option("PKConstraintInAlter")
			IsNotNull(CompareStrings(PropertyValue("Key Group Type"),"PK","2"),"<FALSE>")
			[
				Bucket("93")
				PushOwnerX("")
				"ALTER " [ IsObjectType("Entity") "TABLE " ] [ IsObjectType("View") "VIEW " ] [Owner("")"."] PhysicalName("") "\r\n"
				PopX("")
				/* Append one of the following constraints. Each is guarded by Key Group type. */ 
				"ADD " 	
				IsNotNull(Execute("ExecuteConstraint"), "<TRUE>")    
				[Execute("EndOfStatement")   ]
			]
		]

		[	Option("AKConstraintInAlter")
			IsNotNull(CompareStrings(PropertyValue("Key Group Type"),"AK","2"),"<FALSE>")
			
			[
				Bucket("93")   
				PushOwnerX("")
				"ALTER " [ IsObjectType("Entity") "TABLE " ] [ IsObjectType("View") "VIEW " ] [Owner("")"."] PhysicalName("") "\r\n"
				PopX("")
				/* Append one of the following constraints. Each is guarded by Key Group type. */ 
				"ADD " 	
				IsNotNull(Execute("ExecuteConstraint"), "<TRUE>")    
				[Execute("EndOfStatement")   ]
			]
		]


		[	Option("FKConstraintInAlter")
			IsNotNull(CompareStrings(PropertyValue("Key Group Type"),"IF","2"),"<FALSE>")
			[
				Bucket("94")

		        
				PushOwnerX("")
				[
				    IsObjectType("Entity")
				    "ALTER "  "TABLE "  [ IsObjectType("View") "VIEW " ] [Owner("")"."] PhysicalName("") "\r\n"
				    PopX("")
				    /* Append one of the following constraints. Each is guarded by Key Group type. */ 
				    "ADD " 	
				    IsNotNull(Execute("ExecuteConstraint"), "<TRUE>")    
				    [Execute("EndOfStatement") ]  
				]
				
				[
				    IsObjectType("View")
				    "ALTER "  "VIEW "  [Owner("")"."] PhysicalName("") 
				    PopX("")
				    "\r\n\t" "ADD " IsNotNull(Execute("ViewFKConstraint"),"<TRUE>")
				    [Execute("EndOfStatement")]   
				]
				
			]
		]
		
    
    
] 
#}
SPItemEnd

SPItemBegin = ExecuteConstraint
10000:                             
{# [
	Execute("PKConstraint")
	Execute("AKConstraint")
	Execute("FKConstraint")
	]
#}
SPItemEnd

SPItemBegin =  Use Alter To Add Column
1:
{#
	[Option("AlterStatements") "USE ALTER" ]
	[Option("!AlterStatements") IsLastColumn("")
	    IsLastColumn("") 
		[DecodeProperty("Null Option", "1", "<EMPTY>") 
			[
				PushObject("Default Constraint Usage")  
				[
					"USE ALTER"
				]
				PopX("")
			]
		]
		
		[
			DecodeProperty("Null Option", "1", "<FALSE>","<TRUE>") 
				"USE ALTER"
		]
	]


#}
SPItemEnd



SPItemBegin = Create Attribute
1:
{#
    /* Do not alter if the entire entity was created. */
    [  IsNotNull(Execute("Use Alter To Add Column"),"<FALSE>")
		IsNull(Execute("This Entity Created"))
		FESetString("Create Attribute")
		
        Bucket("85")
        RecordAlter("")
        FESetString("Create Attribute")
        
        PushOwnerX("") 
        "ALTER TABLE " [Owner("")"."]PhysicalName("") PopX("") "\r\n\t"
        "ADD (" PhysicalName("") " " Datatype("")
		[DecodeProperty("Timezone Option", "904", " WITH TIME ZONE", "905", " WITH LOCAL TIME ZONE")]
		[
         Option("ColumnDefaultValue") 
			PushObject("Default Constraint Usage") 
				[PushReferenceX("Default Property") " "  
					[										
					InBuiltObject("")
						ExpandErwinMacro("Server Value")
					]
					[
						" DEFAULT " 
						ExpandErwinMacro("Server Value")
					]
				PopX("")]
			PopX("")
		]
		[" "  DecodeProperty("Null Option", "1", "NOT NULL", "<Empty>")]
        
        [Option("ColumnCheckConstraint") 
			[PushObject("Check Constraint Usage")    
			[ " " Option("ConstraintName") "CONSTRAINT "  PhysicalName("") ]
				[PushReferenceX("Validation Rule Ref")   
					[
						" CHECK ("  ExpandErwinMacro("Server Value") ")"
					] 
				PopX("") ] 
			PopX("") ]
		]
		
		
		")"
        Execute("EndOfStatement")
    ]
    [
		IsNull(Execute("Use Alter To Add Column"))
		
		PushOwnerX("")
			Execute("Generate Entity")
		PopX("")
    
    ]
    
#}
SPItemEnd


SPItemBegin = Drop Attribute
1:
{# 
	/* Do not alter if the entire entity was created. */
    [PushOwnerX("") IsNull(Execute("If Entity Deleted"))
    FESetString("Drop Attribute")
		Bucket("40") "\r\n"
		RecordAlter("")
		"ALTER TABLE " [Owner("")"."]PhysicalName("") PopX("")
		"\r\n"
		"  DROP COLUMN " PrevPhysicalName("") " CASCADE CONSTRAINTS"
		Execute("EndOfStatement")    
    ]
#}
SPItemEnd

SPItemBegin = Alter Allow Modify Attribute Properties
10000: 
{#
[
	IsModifiedList("Datatype", "Physical Name", "Null Option","Name", "Comment","Definition")
		"ALTER MODIFY HANDLED"
] 
#}
SPItemEnd


SPItemBegin = Alter Modify Attribute
1:
{# 
[
	[IsPropModified("Physical Name","Name")
		[
			Once("Alter Modify Object Physical Name")
			IsNull(Execute("Rename Object"))
			Bucket("30") "\r\n"
			RecordAlter("")
			PushOwnerX("")
			"ALTER TABLE "
					[Owner("")"."]PhysicalName("") 
			PopX("")
			" RENAME COLUMN "  PrevPhysicalName("")  " TO " PhysicalName("")
			[ Execute("EndOfStatement") ]
		]
	]
	
	[IsPropModified("Datatype")
		[ Execute("Alter Modify Attribute Datatype") ]
	]
	
	[IsPropModified("Null Option")
		[ Execute("Alter Modify Attribute Null Option") ]
	]
	
	/* Process the  (EMXTypes::pComment) property of the Attribute. */
	[IsPropModified("Definition", "Comment")
		[	
				[
					Generate("") Option("Comments") 
					Bucket("90") 
					RecordAlter("")
					"COMMENT ON COLUMN " PushOwnerX("") [Owner("")"."]PhysicalName("") PopX("") "." PhysicalName("") " IS '"   [SubstituteString(TranslatedValue("Comment"),"'","''")] "'"
					Execute("EndOfStatement") 
				]

		]
	]
	
	[
		IsNull(Execute("Alter Allow Modify Attribute Properties"))
		[
			PushTopLevelObject("")
				[
					Execute(Execute("Modify Object"))
				]
			PopX("")
		]
	]
	
	
]	
#}
SPItemEnd


SPItemBegin = Alter Allow Modify View Attribute Properties
10000: 
{#
[
	IsModifiedList("Definition")
		"ALTER MODIFY HANDLED"
] 
#}
SPItemEnd


SPItemBegin = Alter Modify View Attribute
1: 
{#      
	
	/* Process the Comment (EMXTypes::pDefinition) property of the view attribute. */
	[IsPropModified("Definition")
     	Option("Comments")
		Bucket("90")
		RecordAlter("")	
		PushOwnerX("")
		"COMMENT ON COLUMN " [Owner("")"."] PhysicalName("")"." 
		PopX("")
		PhysicalName("") " IS '"  [SubstituteString(TranslatedValue("Definition"),"'","''")] "'" 
		Execute("EndOfStatement")	       
	]
	
	[IsNull(Execute("Alter Allow Modify View Attribute Properties"))
		PushTopLevelObject("")
			[
				[
					Execute(Execute("Modify Object"))
				]
			]
		PopX("")
    ]
    
#}
SPItemEnd


SPItemBegin = Alter Allow Modify Cached View Attribute Properties
10000: 
{#
[
	IsModifiedList("Definition")
		"ALTER MODIFY HANDLED"
] 
#}
SPItemEnd


SPItemBegin = Alter Modify Cached View Attribute
1: 
{#      
	
	/* Process the Comment (EMXTypes::pComment) property of the view attribute. */
	[IsPropModified("Definition")
     	Option("Comments")
		Bucket("90")
		RecordAlter("")	
		PushOwnerX("")
		"COMMENT ON COLUMN " [Owner("")"."] Name("")"." 
		PopX("")
		Name("") " IS '"  [SubstituteString(TranslatedValue("Definition"),"'","''")] "'" 
		Execute("EndOfStatement")	       
	]
	
	[IsNull(Execute("Alter Allow Modify Cached View Attribute Properties"))
		PushTopLevelObject("")
			[
				[
					Execute(Execute("Modify Object"))
				]
			]
		PopX("")
    ]
    
#}
SPItemEnd

SPItemBegin = Alter Modify Attribute Datatype
1:
{#
	/* Do not alter if the entire entity was created. */
    [Once("Alter Modify Null Option")
		AllowAlterDatatype("")
		IsNull(Execute("If Attribute Created"))
		PushOwnerX("") 
		Bucket("40") "\r\n"
		RecordAlter("")
		"ALTER TABLE " [Owner("")"."]PhysicalName("") PopX("")
		" MODIFY("  PhysicalName("")  " "  Datatype("") [DecodeProperty("Timezone Option", "904", " WITH TIME ZONE", "905", " WITH LOCAL TIME ZONE")]
			 ")"
		[ Execute("EndOfStatement")     ]
    ]
    
    [
		IsNull([AllowAlterDatatype("") "Recreate Entity"])
		PushOwnerX("")
		Execute("Generate Entity")
		PopX("")
	]
#}
SPItemEnd



SPItemBegin = Alter Modify Null Option
1:
{#
	/* Do not alter if the entire entity was created. */
    [Once("Alter Modify Null Option")
		IsNull(Execute("If Attribute Created"))
		PushOwnerX("") 
		Bucket("40") "\r\n"
		RecordAlter("")
		"ALTER TABLE " [Owner("")"."]PhysicalName("") PopX("")
		" MODIFY("  PhysicalName("")  " "  
			[" "  DecodeProperty("Null Option", "1", "NOT NULL", "<Empty>")] ")"
			
		[ Execute("EndOfStatement")     ]
    ]
#}
SPItemEnd

SPItemBegin = Drop Default Constraint Usage
1: 
{#
	[Once("Drop Default Constraint Usage")
		/* Do not alter if the entire attribute was dropped. */
        IsNull(Execute("This Attribute Deleted"))
		Bucket("11") "\r\n"
		RecordAlter("")
		PushOwnerX("") PushOwnerX("")
		"ALTER TABLE "  [Owner("")"."]PhysicalName("")  PopX("") "\r\n\t"   
		"MODIFY " PhysicalName("") " DEFAULT NULL "
		PopX("")
		[ Execute("EndOfStatement") ]
	]

#}
SPItemEnd


SPItemBegin = Create Default Constraint Usage
1: 
{# 
    [   IsNull(Execute("This Attribute Created"))
		Execute("Alter Modify Default Constraint Usage")
    ]
#}
SPItemEnd


SPItemBegin = Alter Modify Default Constraint Usage
1: 
{#
	[
		/* Do not alter if the entire entity was created. */
		Bucket("94") "\r\n"
		RecordAlter("")
		PushOwnerX("") PushOwnerX("")
		"ALTER TABLE "  [Owner("")"."]PhysicalName("")  PopX("") "\r\n\t"   
		"MODIFY " PhysicalName("") 
		PopX("")
			[
				PushReferenceX("Default Property")
						[
							Generate("")
							[
								" DEFAULT "  ExpandErwinMacro("Server Value") 
							]
						]
				PopX("")
			]

		Execute("EndOfStatement")
	]

#}
SPItemEnd

SPItemBegin = Create Table Check Constraint Usage
1: 
{#
	[
		Once("Create Table Check Constraint Usage")
        /* Do not alter if the entire entity was created. */
        IsNull(Execute("This Entity Created"))
        Bucket("11") "\r\n"
        RecordAlter("")
        PushOwnerX("") 
        ["ALTER TABLE "  [Owner("")"."]PhysicalName("")  "\r\n\t"  PopX("") ]
        ["ADD( "
			[Option("ConstraintName") ["CONSTRAINT "  PhysicalName("")  " "]
				[

					[PushReferenceX("Validation Rule Ref")
						[
							" CHECK ("  ExpandErwinMacro("Server Value") ")"
						]
					PopX("")
					]

				]
			]
			" )"
		]
        Execute("EndOfStatement")
    ]

#}
SPItemEnd



SPItemBegin = Drop Table Check Constraint Usage
1: 
{#
	[	
		Once("Drop Table Check Constraint Usage")
        /* Do not alter if the entire entity was created. */
        IsNull(Execute("This Entity Deleted"))
        Bucket("11") "\r\n"
        RecordAlter("")
        PushOwnerX("")
        ["ALTER TABLE "  [Owner("")"."]PhysicalName("")  "\r\n\t"  PopX("") ]
        ["DROP CONSTRAINT "  PhysicalName("")  " "]
		
        Execute("EndOfStatement")
    ]
#}
SPItemEnd

SPItemBegin = Alter Allow Modify Table Check Constraint Usage Properties
10000: 
{#
[
	IsModifiedList("Physical Name","Name")
		"ALTER MODIFY HANDLED"
] 
#}
SPItemEnd


SPItemBegin = Alter Modify Table Check Constraint Usage
1: 
{#
	[
		IsPropModified("Physical Name","Name")
		[
			Once("Alter Modify Object Physical Name")
			IsNull(Execute("Rename Object"))
			Bucket("30") "\r\n"
			RecordAlter("")
			PushOwnerX("")
			"ALTER TABLE "
					[Owner("")"."]PhysicalName("") 
			PopX("")
			" RENAME CONSTRAINT "  PrevPhysicalName("") "  To " PhysicalName("")
			[ Execute("EndOfStatement") ]
		]
	]

[
	IsNull(Execute("Alter Allow Modify Table Check Constraint Usage Properties"))
	[Execute("Drop Table Check Constraint Usage")]
	[Execute("Create Table Check Constraint Usage")]
	
]
	
#}
SPItemEnd

SPItemBegin = Generate Check Constraint Usage
1: 
{#
	[Execute("Drop Check Constraint Usage")]
	[Execute("Create Check Constraint Usage")]

#}
SPItemEnd

SPItemBegin = Generate Table Check Constraint Usage
1: 
{#
	[Execute("Drop Table Check Constraint Usage")]
	[Execute("Create Table Check Constraint Usage")]

#}
SPItemEnd


SPItemBegin = Create Check Constraint Usage
1: 
{#
	[IsNull(Execute("This Attribute Created"))
		Once("Create Check Constraint Usage")
        Execute("Alter Modify Check Constraint Usage")
    ]

#}
SPItemEnd



SPItemBegin = Drop Check Constraint Usage
1: 
{#
	[	Once("Drop Check Constraint Usage")
        /* Do not alter if the entire attribute was dropped. */
        IsNull(Execute("This Attribute Deleted"))
        Bucket("11") "\r\n"
        RecordAlter("")
        PushOwnerX("") PushOwnerX("")
        "ALTER TABLE "  [Owner("")"."]PhysicalName("")  "\r\n\t"  PopX("") PopX("")
        "DROP CONSTRAINT "  PhysicalName("")  " "
        Execute("EndOfStatement")
    ]
#}
SPItemEnd

SPItemBegin = Alter Allow Modify Check Constraint Usage Properties
10000: 
{#
[
	IsModifiedList("Physical Name","Name")
		"ALTER MODIFY HANDLED"
] 
#}
SPItemEnd



SPItemBegin = Alter Modify Check Constraint Usage
1: 
{#      [
		IsPropModified("Physical Name","Name")
		[
			Once("Alter Modify Object Physical Name")
			IsNull(Execute("Rename Object"))
			Bucket("30") "\r\n"
			RecordAlter("")
			PushOwnerX("")
			PushOwnerX("")
			"ALTER TABLE "
					[Owner("")"."]PhysicalName("") 
			PopX("")
			PopX("")
			" RENAME CONSTRAINT "  PrevPhysicalName("")  " To " PhysicalName("")
			[ Execute("EndOfStatement") ]
		]
	]

	[	IsNull(Execute("Alter Allow Modify Check Constraint Usage Properties"))
		Once("Alter Modify Check Constraint Usage")
		IsNull(Execute("This Attribute Created"))
		/* Do not alter if the entire entity was created. */
		Bucket("11") "\r\n"
		RecordAlter("")
		PushOwnerX("") PushOwnerX("")
		"ALTER TABLE "  [Owner("")"."]PhysicalName("")  PopX("") "\r\n\t"   
		"MODIFY " PhysicalName("") 
		PopX("")
		[" CONSTRAINT "  PhysicalName("")  " "]
			[
				PushReferenceX("Validation Rule Ref")
						[
							Generate("")
							[
								" CHECK ("  ExpandErwinMacro("Server Value") ")"
							]
						]
				PopX("")
			]

		Execute("EndOfStatement")
	]
    
#}
SPItemEnd



SPItemBegin = Alter Modify Validation Rule
1: 
{#
	[
		ForEachVectorReference("Dependent Objects Ref")
		{
			PushOwnerX("")
			[
			    IsObjectType("Entity")
			    PopX("")
					[ Execute("Alter Modify Table Check Constraint Usage") ]
			]
			[
				IsObjectType("Attribute")
			    PopX("")
					[ Execute("Alter Modify Check Constraint Usage") ]
			
			]
		}
	]
#}
SPItemEnd

			  
SPItemBegin = Alter Modify Default
1: 
{#
	[

		[
			ForEachVectorReference("Dependent Objects Ref")
			{
				Execute("Alter Modify Default Constraint Usage")
			}
		]
    ]
#}
SPItemEnd

SPItemBegin = Rename Object
10000: 
{#[

	CompareStrings(PrevPhysicalName(""), PhysicalName("")) "RENAME"
]#}
SPItemEnd

SPItemBegin = Rename Constraint
10000: 
{#[

	CompareStrings(OldPropertyValue("Constraint Name"), PropertyValue("Constraint Name")) "RENAME"
]#}
SPItemEnd

SPItemBegin = Alter Modify Object Physical Name
10000: 
{#[
	Once("Alter Modify Object Physical Name")
	IsNull(Execute("Rename Object"))
	Bucket("30") "\r\n"
	RecordAlter("")
	"ALTER "
    [IsObjectType("Entity") "TABLE "] 
    [IsObjectType("Key Group") "INDEX "] 
    [IsObjectType("Attribute") IsNotNull(Execute("IsObjectEntity")) "TABLE  "]
    [IsObjectType("Trigger") "TRIGGER  "]
    [
		PushTopLevelObject("")
			[PrevOwner("")"."]PrevPhysicalName("") 
		PopX("")
	]
	 " RENAME TO "  [Owner("")"."]PhysicalName("")    
    [ Execute("EndOfStatement") ]
  ]
#}
SPItemEnd


SPItemBegin = Alter Modify Object DB Owner
10000: 
{#
	[Once("Alter Modify Object DB Owner")
	Once("Alter Modify Object Physical Name")
		Bucket("30") "\r\n"
		RecordAlter("")
		"ALTER "
		[IsObjectType("Entity") "TABLE "] 
		[IsObjectType("Key Group") "INDEX "] 
		[PrevOwner("")"."]PrevPhysicalName("")  " RENAME TO "  [Owner("")"."]PhysicalName("")    
		[ Execute("EndOfStatement") ]
	]
#}
SPItemEnd





SPItemBegin = Alter Modify Attribute Null Option
10000: 
{#[


	
	/* Form the ALTER TABLE ALTER COLUMN DDL. */
	[
     IsNull(Execute("If Entity Created"))
		Once("Alter Modify Attribute Null Option")
		
		Bucket("90") "\r\n"
		RecordAlter("")
		PushOwnerX("")
        "ALTER TABLE "  [Owner("")"."]PhysicalName("") PopX("") "\r\n\t"
        "MODIFY (" PhysicalName("")  " "  Datatype("")  " "  
			DecodeProperty("Null Option", "1", "NOT NULL", "<Empty>") ")"
		Execute("EndOfStatement")
		PushOwnerX("")
	]

	PopX("")    
]
#}
SPItemEnd




SPItemBegin = This Attribute Deleted
10000:
{#
	PushOwnerX("")
    [
		/* Evaluates to TRUE if QueryString is true. */
		[QueryString("Drop Attribute") "TRUE"]
		
		Execute("This Entity Deleted")
	]
	PopX("")
#}
SPItemEnd
SPItemBegin =  This Entity Created
1:
{#
	PushOwnerX("")
		[IsNotNull(Execute("If Entity Created")) " CREATED"]
	PopX("")

#}
SPItemEnd

SPItemBegin =  This Entity Deleted
1:
{#
	PushOwnerX("")
		[IsObjectType("Entity") IsNotNull(Execute("If Entity Deleted")) " Deleted"]
		[IsObjectType("Cached View") IsNotNull(Execute("If Cached View Deleted")) " Deleted"]
	PopX("")

#}
SPItemEnd


SPItemBegin = This Attribute Created
10000:
{#
	PushOwnerX("")
    [
		/* Evaluates to TRUE if QueryString is true. */
		[QueryString("Create Attribute") "TRUE"]
		
		Execute("This Entity Created")
    ]
	PopX("")
#}
SPItemEnd

SPItemBegin = If Attribute Created
10000:
{#
    [
		/* Evaluates to TRUE if QueryString is true. */
		[QueryString("Create Attribute") "TRUE"]
		
		Execute("This Entity Created")
    ]
#}
SPItemEnd

SPItemBegin = If Entity Created
10000:
{#
    /* Evaluates to TRUE if QueryString is true. */
    [QueryString("Create Entity") "TRUE"]
#}
SPItemEnd

SPItemBegin = If Cached View Deleted
10000:
{#
    /* Evaluates to TRUE if QueryString is true. */
    [QueryString("Drop Cached View") "TRUE"]
#}
SPItemEnd


SPItemBegin = If Entity Deleted
10000:
{#
    /* Evaluates to TRUE if QueryString is true. */
    [QueryString("Drop Entity") "TRUE"]
#}
SPItemEnd

SPItemBegin = Table Has Insert Columns For Data Preservation 
10000: 
{#[

	ForEachVectorReference("Column Order List")
	{
		[ IsNull([IsCreated("") "Suppress Column"])
			Separator(", ")
			PhysicalName("")
		]
	}
]
#}
SPItemEnd
		
		
SPItemBegin = Insert Columns For Data Preservation
10000: 
{#[
	IsNotNull(Execute("Table Has Insert Columns For Data Preservation"),"<FALSE>")
	/* Prepare the insert query for the data preservation. */
    "INSERT INTO " [Owner("")"."] PhysicalName("")
    " ("
		ForEachVectorReference("Column Order List")
		{
			[ IsNull([IsCreated("") "Suppress Column"])
				Separator(", ")
				PhysicalName("")
			]
		}
	") SELECT "
			ForEachVectorReference("Column Order List")
			{
				[
					IsNull([IsCreated("") "Suppress Column"])
					Separator(", ")
					ConversionFunction()
				]
			}
	" FROM "  TempTable("Temporary")	
		[" WHERE " DataPreservationOptions("WhereClause")]    
    Execute("EndOfStatement")
]
#}
SPItemEnd


SPItemBegin = Drop Temp Table
10000: 
{#
	[IsNotNull(Execute("Table Has Insert Columns For Data Preservation"),"<FALSE>")
		"DROP TABLE IF EXISTS "  IsNotNull(TempTable("Temporary"), "<TRUE>") " CASCADE " [DBMSVersion("10")" PURGE"] Execute("EndOfStatement")
	]
#}
SPItemEnd

SPItemBegin = No Drop Temp Table
10000: 
{#
	[ 
	DecodeProperty("Data Organization Type","913","<True>")
	Bucket("140") "\r\n"
	"/* For External Table -" PhysicalName("") " Load Data From Temporary Table " TempTable("Temporary") "*/ \r\n"
        "/* Warning - Drop Temporary Table After Load Of Data */" "\r\n"
        EndOfStatement("")
        
	]
#}
SPItemEnd

SPItemBegin =  Rename Table With Temporary Name
10000: 
{#[             
   "ALTER TABLE " [PrevOwner("")"."]PrevPhysicalName("") " RENAME TO " TempTable("Temporary")
   Execute("EndOfStatement")
]
#}
SPItemEnd



SPItemBegin = Alter Create Handled
10000: 
{#
[
	IsObjectType("Attribute", "Default Constraint Usage", "Check Constraint Usage", "Oracle Constraint State")
		"ALTER CREATE HANDLED"
] 
#}
SPItemEnd


SPItemBegin = Alter Generic Create Object
10000: 
{#
[
	[IsObjectType("Attribute") IsNotNull(Execute("IsObjectEntity"))
		Execute("Create Attribute")
	]
	
	[IsObjectType("Check Constraint Usage")
		PushOwnerX("")
		[  IsObjectType("Attribute")
		    PopX("")
				[Execute("Create Check Constraint Usage")]
		]
		[  IsObjectType("Entity")
			PopX("")
				[Execute("Create Table Check Constraint Usage")]
		]
	]
	
    [IsObjectType("Default Constraint Usage")
		Execute("Create Default Constraint Usage")
    ]
    

	[IsObjectType("Oracle Constraint State")
		Execute("Create Oracle Constraint State")
	]
    
    [IsNull(Execute("Alter Create Handled"))
		Execute("Handle Create Object")
    ]
        
]
#}
SPItemEnd

SPItemBegin = Handle Create Object
10000: 
{#
	[
		PushTopLevelObject("")
			[
				
				[	IsNotNull(Execute("Object Newly Created"),"<FALSE>")
						[Execute(Execute("Create Object"))]
				]
				
				[	IsNull(Execute("Object Newly Created"))
						[Execute(Execute("Generate Object"))]
				]
				
			]
		PopX("")
	]
#}
SPItemEnd

SPItemBegin = Object Newly Created
10000: 
{#
["Generate " IsCreated("")]
#}
SPItemEnd


SPItemBegin = Create Object
10000: 
{#
"Create " ObjectName("")
#}
SPItemEnd

SPItemBegin = Generate Object
10000: 
{#
"Generate " ObjectName("")
#}
SPItemEnd



SPItemBegin = Alter Drop Handled
10000: 
{#
[
	IsObjectType("Attribute", "Default Constraint Usage", "Check Constraint Usage", "Oracle Constraint State")
		"ALTER DROP HANDLED"
] 
#}
SPItemEnd


SPItemBegin = Alter Generic Drop Object
10000: 
{#
[

	[IsObjectType("Attribute") IsNotNull(Execute("IsObjectEntity"))
		Execute("Drop Attribute")
	]
	
	[IsObjectType("Default Constraint Usage")
		Execute("Drop Default Constraint Usage")
	]
	
	
	[IsObjectType("Check Constraint Usage")
		PushOwnerX("")
		[  IsObjectType("Attribute")
		    PopX("")
				[Execute("Drop Check Constraint Usage")]
		]
		[  IsObjectType("Entity")
			PopX("")
				[Execute("Drop Table Check Constraint Usage")]
		]
	]
	
	[IsObjectType("Oracle Constraint State")
		Execute("Drop Oracle Constraint State")
	]
	
	
	
    [IsNull(Execute("Alter Drop Handled"))
		Execute("Handle Drop Object")
    ]
] 
#}
SPItemEnd

SPItemBegin = Handle Drop Object
10000: 
{#
[
	PushTopLevelObject("")
		[
			[
				IsNull([IsDeleted("") "Top Level Object Deleted"])
				[
					Execute(Execute("Generate Object"))
				]
			]
			
			[
				IsNotNull([IsDeleted("") "Top Level Object Deleted"],"<FALSE>")
				[
					Execute(Execute("Drop Object"))
				]
			]
		]
	PopX("")
]
#}
SPItemEnd

SPItemBegin = Drop Object
10000: 
{#
"Drop " ObjectName("")
#}
SPItemEnd


SPItemBegin = Alter Modify Handled
10000: 
{#
[
	IsObjectType("Sequence", "Synonym", "Entity", "Cached View", "View", "Relationship", "Trigger", "Key Group", "Attribute", "Default", "Validation Rule", "Default Constraint Usage", "Check Constraint Usage", "Oracle Constraint State")
	
	"ALTER MODIFY HANDLED"
] 
#}
SPItemEnd


SPItemBegin = Alter Generic Modify Object
10000: 
{#
[ 
	[IsObjectType("Default")
		Execute("Alter Modify Default")
	]
	
	[IsObjectType("Validation Rule")
		Execute("Alter Modify Validation Rule")
	]
	
	[IsObjectType("Default Constraint Usage")
		Execute("Alter Modify Default Constraint Usage")
	]
	
	[IsObjectType("Check Constraint Usage")
		PushOwnerX("")
		[  IsObjectType("Attribute")
		    PopX("")
				[Execute("Alter Modify Check Constraint Usage")]
		]
		[  IsObjectType("Entity")
			PopX("")
				[Execute("Alter Modify Table Check Constraint Usage")]
		]
	]
	
	[IsObjectType("Attribute") IsNotNull(Execute("IsObjectEntity"))
		Execute("Alter Modify Attribute")
	]
	
	[IsObjectType("Attribute") IsNotNull(Execute("IsObjectView"))
		Execute("Alter Modify View Attribute")
	]
	
	[IsObjectType("Attribute") IsNotNull(Execute("IsObjectMaterializedView"))
		Execute("Alter Modify Cached View Attribute")
	]
	
	[IsObjectType("Entity")
		Execute("Alter Modify Entity")
	]
	
	[IsObjectType("View")
		Execute("Alter Modify View")
	]
	
	[IsObjectType("Cached View")
		Execute("Alter Modify Cached View")
	]
	
	[IsObjectType("Synonym")
		Execute("Alter Modify Synonym")
	]
	
	[IsObjectType("Sequence")
		Execute("Alter Modify Sequence")
	]
	

	[IsObjectType("Trigger")
		Execute("Alter Modify Trigger")
	]
	
	[IsObjectType("Relationship")
		Execute("Alter Modify Relationship")
	]
	
	[IsObjectType("Key Group")
		Execute("Alter Modify Key Group")
	]	
	
	[IsObjectType("Oracle Constraint State")
		Execute("Alter Modify Oracle Constraint State")
	]

	[IsNull(Execute("Alter Modify Handled"))
		PushTopLevelObject("")
			[
				Execute(Execute("Modify Object"))
			]
		PopX("")
    ]	
 
]
#}
SPItemEnd

SPItemBegin = Modify Object
10000: 
{#
"Generate " ObjectName("")
#}
SPItemEnd
